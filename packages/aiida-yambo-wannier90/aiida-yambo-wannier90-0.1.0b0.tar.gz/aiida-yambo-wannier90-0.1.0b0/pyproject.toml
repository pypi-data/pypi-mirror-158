[build-system]
# build the package with [flit](https://flit.readthedocs.io)
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project]
# See https://www.python.org/dev/peps/pep-0621/
name = "aiida-yambo-wannier90"
dynamic = ["version"] # read from aiida_yambo_wannier90/__init__.py
description = "Plugin to combine Wannier90 interpolations with GW corrections computed by Yambo"
authors = [{ name = "The AiiDA Team" }]
readme = "README.md"
license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Development Status :: 4 - Beta",
    "Framework :: AiiDA"
]
keywords = ["aiida", "plugin"]
requires-python = ">=3.7"
dependencies = [
    "aiida-core>=1.6.4,<3",
    "voluptuous",
    "aiida-yambo>=1.3.0",
    # "aiida-yambo @ git+https://git@github.com/yambo-code/yambo-aiida.git@QP_splitter#egg=aiida-yambo",
    "aiida-wannier90-workflows>=1.0.1",
    # "aiida-wannier90-workflows @ git+https://git@github.com/aiidateam/aiida-wannier90-workflows@develop#egg=aiida-wannier90-workflows",
]

[project.urls]
Source = "https://github.com/aiidaplugins/aiida-yambo-wannier90"

[project.optional-dependencies]
testing = [
    "pgtest~=1.3.1",
    "wheel~=0.31",
    "coverage[toml]",
    "pytest~=6.0",
    "pytest-cov",
    "pytest-regressions",
]
pre-commit = ["pre-commit~=2.17", "pylint>=2.5.0,<2.9"]
docs = [
    "sphinx",
    "sphinxcontrib-contentui",
    "sphinxcontrib-details-directive",
    "furo",
    "markupsafe<2.1"
]

# [project.entry-points."aiida.data"]
# "yambo_wannier90" = "aiida_yambo_wannier90.data:DiffParameters"

[project.scripts]
"aiida-yambo-wannier90" = "aiida_yambo_wannier90.cli:cmd_root"

[project.entry-points."aiida.calculations"]
"yambo_wannier90.gw2wannier90" = "aiida_yambo_wannier90.calculations.gw2wannier90:Gw2wannier90Calculation"

[project.entry-points."aiida.parsers"]
"yambo_wannier90.gw2wannier90" = "aiida_yambo_wannier90.parsers.gw2wannier90:Gw2wannier90Parser"

[project.entry-points."aiida.workflows"]
"yambo_wannier90" = "aiida_yambo_wannier90.workflows:YamboWannier90WorkChain"

# [project.entry-points."aiida.cmdline.data"]
# "yambo_wannier90" = "aiida_yambo_wannier90.cli:data_cli"

[tool.flit.module]
name = "aiida_yambo_wannier90"

[tool.pylint.format]
max-line-length = 125

[tool.pylint.tool-check]
generated-members = [
    "self.exit",
    "self.exit_codes.*",
    "Wannier90Calculation.exit_codes.*",
    "YamboWannier90WorkChain.exit_codes.*",
]

[tool.pylint.messages_control]
disable = [
    "too-many-ancestors",
    "invalid-name",
    "duplicate-code",
    "import-outside-toplevel",
    # black compatibility
    "C0330",
    "C0326",
]

[tool.pytest.ini_options]
# Configuration for [pytest](https://docs.pytest.org)
minversion = '6.0'
testpaths = [
    'tests',
]
python_files = "test_*.py example_*.py"
filterwarnings = [
    "ignore::DeprecationWarning:aiida:",
    "ignore::DeprecationWarning:plumpy:",
    "ignore::DeprecationWarning:django:",
    "ignore::DeprecationWarning:yaml:",
]

[tool.coverage.run]
# Configuration of [coverage.py](https://coverage.readthedocs.io)
# reporting which lines of your plugin are covered by tests
source = ["aiida_yambo_wannier90"]

[tool.isort]
# Configuration of [isort](https://isort.readthedocs.io)
profile = "black"
force_sort_within_sections = true
sections = [
    'FUTURE',
    'STDLIB',
    'THIRDPARTY',
    'AIIDA',
    'AIIDA_QUANTUMESPRESSO',
    'AIIDA_WANNIER90',
    'AIIDA_WANNIER90_WORKFLOWS',
    'AIIDA_YAMBO',
    'FIRSTPARTY',
    'LOCALFOLDER'
]
known_aiida = ['aiida']
known_aiida_quantumespresso = ['aiida_quantumespresso']
known_aiida_wannier90 = ['aiida_wannier90']
known_aiida_wannier90_workflows = ['aiida_wannier90_workflows']
known_aiida_yambo = ['aiida_yambo']

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38

[testenv]
usedevelop=True

[testenv:py{37,38,39,310}]
description = Run the test suite against a python version
extras = testing
commands = pytest {posargs}

[testenv:pre-commit]
description = Run the pre-commit checks
extras = pre-commit
commands = pre-commit run {posargs}

[testenv:docs]
description = Build the documentation
extras = docs
commands = sphinx-build -nW --keep-going -b html {posargs} docs/source docs/build/html
commands_post = echo "open file://{toxinidir}/docs/build/html/index.html"
"""
