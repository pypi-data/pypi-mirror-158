import java.io
import java.util
import java.util.function
import jpype.protocol
import org.optaplanner.core.api.score.calculator
import org.optaplanner.core.api.score.stream
import org.optaplanner.core.config
import typing



class ScoreDirectorFactoryConfig(org.optaplanner.core.config.AbstractConfig['ScoreDirectorFactoryConfig']):
    """
    public class ScoreDirectorFactoryConfig extends :class:`~org.optaplanner.core.config.AbstractConfig`<:class:`~org.optaplanner.core.config.score.director.ScoreDirectorFactoryConfig`>
    """
    def __init__(self): ...
    def copyConfig(self) -> 'ScoreDirectorFactoryConfig':
        """
            Description copied from class: :meth:`~org.optaplanner.core.config.AbstractConfig.copyConfig`
            Typically implemented by constructing a new instance and calling
            :meth:`~org.optaplanner.core.config.AbstractConfig.inherit` on it
        
            Specified by:
                :meth:`~org.optaplanner.core.config.AbstractConfig.copyConfig` in
                class :class:`~org.optaplanner.core.config.AbstractConfig`
        
            Returns:
                new instance
        
        
        """
        ...
    def getAssertionScoreDirectorFactory(self) -> 'ScoreDirectorFactoryConfig': ...
    def getConstraintProviderClass(self) -> typing.Type[org.optaplanner.core.api.score.stream.ConstraintProvider]: ...
    def getConstraintProviderCustomProperties(self) -> java.util.Map[str, str]: ...
    def getConstraintStreamImplType(self) -> org.optaplanner.core.api.score.stream.ConstraintStreamImplType: ...
    def getDroolsAlphaNetworkCompilationEnabled(self) -> bool: ...
    def getEasyScoreCalculatorClass(self) -> typing.Type[org.optaplanner.core.api.score.calculator.EasyScoreCalculator]: ...
    def getEasyScoreCalculatorCustomProperties(self) -> java.util.Map[str, str]: ...
    def getGizmoKieBaseSupplier(self) -> java.util.function.Supplier:
        """
            For internal use only, get the generated Gizmo KieBaseSupplier.
        
        """
        ...
    def getIncrementalScoreCalculatorClass(self) -> typing.Type[org.optaplanner.core.api.score.calculator.IncrementalScoreCalculator]: ...
    def getIncrementalScoreCalculatorCustomProperties(self) -> java.util.Map[str, str]: ...
    def getInitializingScoreTrend(self) -> str: ...
    def getKieBaseConfigurationProperties(self) -> java.util.Map[str, str]: ...
    def getScoreDrlFileList(self) -> java.util.List[java.io.File]: ...
    def getScoreDrlList(self) -> java.util.List[str]: ...
    def inherit(self, scoreDirectorFactoryConfig: 'ScoreDirectorFactoryConfig') -> 'ScoreDirectorFactoryConfig':
        """
            Description copied from class: :meth:`~org.optaplanner.core.config.AbstractConfig.inherit`
            Inherits each property of the :code:`inheritedConfig` unless that property (or a semantic alternative) is defined by
            this instance (which overwrites the inherited behaviour).
        
            After the inheritance, if a property on this :class:`~org.optaplanner.core.config.AbstractConfig` composition is
            replaced, it should not affect the inherited composition instance.
        
            Specified by:
                :meth:`~org.optaplanner.core.config.AbstractConfig.inherit` in
                class :class:`~org.optaplanner.core.config.AbstractConfig`
        
            Parameters:
                inheritedConfig (:class:`~org.optaplanner.core.config.score.director.ScoreDirectorFactoryConfig`): never null
        
            Returns:
                this
        
        
        """
        ...
    def isDroolsAlphaNetworkCompilationEnabled(self) -> bool: ...
    def setAssertionScoreDirectorFactory(self, scoreDirectorFactoryConfig: 'ScoreDirectorFactoryConfig') -> None: ...
    def setConstraintProviderClass(self, class_: typing.Type[org.optaplanner.core.api.score.stream.ConstraintProvider]) -> None: ...
    def setConstraintProviderCustomProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...
    def setConstraintStreamImplType(self, constraintStreamImplType: org.optaplanner.core.api.score.stream.ConstraintStreamImplType) -> None: ...
    def setDroolsAlphaNetworkCompilationEnabled(self, boolean: bool) -> None: ...
    def setEasyScoreCalculatorClass(self, class_: typing.Type[org.optaplanner.core.api.score.calculator.EasyScoreCalculator]) -> None: ...
    def setEasyScoreCalculatorCustomProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...
    def setGizmoKieBaseSupplier(self, supplier: typing.Union[java.util.function.Supplier, typing.Callable]) -> None:
        """
            For internal use only, set the generated Gizmo KieBaseSupplier.
        
        """
        ...
    def setIncrementalScoreCalculatorClass(self, class_: typing.Type[org.optaplanner.core.api.score.calculator.IncrementalScoreCalculator]) -> None: ...
    def setIncrementalScoreCalculatorCustomProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...
    def setInitializingScoreTrend(self, string: str) -> None: ...
    def setKieBaseConfigurationProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...
    def setScoreDrlFileList(self, list: java.util.List[typing.Union[java.io.File, jpype.protocol.SupportsPath]]) -> None: ...
    def setScoreDrlList(self, list: java.util.List[str]) -> None: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withAssertionScoreDirectorFactory(self, scoreDirectorFactoryConfig: 'ScoreDirectorFactoryConfig') -> 'ScoreDirectorFactoryConfig': ...
    def withConstraintProviderClass(self, class_: typing.Type[org.optaplanner.core.api.score.stream.ConstraintProvider]) -> 'ScoreDirectorFactoryConfig': ...
    def withConstraintProviderCustomProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> 'ScoreDirectorFactoryConfig': ...
    def withConstraintStreamImplType(self, constraintStreamImplType: org.optaplanner.core.api.score.stream.ConstraintStreamImplType) -> 'ScoreDirectorFactoryConfig': ...
    def withDroolsAlphaNetworkCompilationEnabled(self, boolean: bool) -> 'ScoreDirectorFactoryConfig': ...
    def withEasyScoreCalculatorClass(self, class_: typing.Type[org.optaplanner.core.api.score.calculator.EasyScoreCalculator]) -> 'ScoreDirectorFactoryConfig': ...
    def withEasyScoreCalculatorCustomProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> 'ScoreDirectorFactoryConfig': ...
    def withGizmoKieBaseSupplier(self, supplier: typing.Union[java.util.function.Supplier, typing.Callable]) -> 'ScoreDirectorFactoryConfig':
        """
            For internal use only, set the generated Gizmo KieBaseSupplier.
        
        """
        ...
    def withIncrementalScoreCalculatorClass(self, class_: typing.Type[org.optaplanner.core.api.score.calculator.IncrementalScoreCalculator]) -> 'ScoreDirectorFactoryConfig': ...
    def withIncrementalScoreCalculatorCustomProperties(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> 'ScoreDirectorFactoryConfig': ...
    def withInitializingScoreTrend(self, string: str) -> 'ScoreDirectorFactoryConfig': ...
    def withScoreDrlFileList(self, list: java.util.List[typing.Union[java.io.File, jpype.protocol.SupportsPath]]) -> 'ScoreDirectorFactoryConfig': ...
    def withScoreDrlFiles(self, *file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> 'ScoreDirectorFactoryConfig': ...
    def withScoreDrlList(self, list: java.util.List[str]) -> 'ScoreDirectorFactoryConfig': ...
    def withScoreDrls(self, *string: str) -> 'ScoreDirectorFactoryConfig': ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.score.director")``.

    ScoreDirectorFactoryConfig: typing.Type[ScoreDirectorFactoryConfig]
