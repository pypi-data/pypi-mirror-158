import java.lang
import java.time
import java.util
import java.util.function
import org.optaplanner.core.config
import org.optaplanner.core.impl.solver.termination
import typing



class TerminationCompositionStyle(java.lang.Enum['TerminationCompositionStyle']):
    """
    public enum TerminationCompositionStyle extends :class:`~org.optaplanner.core.config.solver.termination.https:.docs.oracle.com.javase.8.docs.api.java.lang.Enum?is`<:class:`~org.optaplanner.core.config.solver.termination.TerminationCompositionStyle`>
    """
    AND: typing.ClassVar['TerminationCompositionStyle'] = ...
    OR: typing.ClassVar['TerminationCompositionStyle'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'TerminationCompositionStyle':
        """
            Returns the enum constant of this type with the specified name. The string must match *exactly* an identifier used to
            declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)
        
            Parameters:
                name (:class:`~org.optaplanner.core.config.solver.termination.https:.docs.oracle.com.javase.8.docs.api.java.lang.String?is`): the name of the enum constant to be returned.
        
            Returns:
                the enum constant with the specified name
        
            Raises:
                :class:`~org.optaplanner.core.config.solver.termination.https:.docs.oracle.com.javase.8.docs.api.java.lang.IllegalArgumentException?is`: if this enum type has no constant with the specified name
                :class:`~org.optaplanner.core.config.solver.termination.https:.docs.oracle.com.javase.8.docs.api.java.lang.NullPointerException?is`: if the argument is null
        
        
        """
        ...
    @staticmethod
    def values() -> typing.List['TerminationCompositionStyle']:
        """
            Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to
            iterate over the constants as follows:
        
            .. code-block: java
            
            for (TerminationCompositionStyle c : TerminationCompositionStyle.values())
                System.out.println(c);
            
        
            Returns:
                an array containing the constants of this enum type, in the order they are declared
        
        
        """
        ...

class TerminationConfig(org.optaplanner.core.config.AbstractConfig['TerminationConfig']):
    """
    public class TerminationConfig extends :class:`~org.optaplanner.core.config.AbstractConfig`<:class:`~org.optaplanner.core.config.solver.termination.TerminationConfig`>
    """
    def __init__(self): ...
    def calculateTimeMillisSpentLimit(self) -> int: ...
    def calculateUnimprovedTimeMillisSpentLimit(self) -> int: ...
    def copyConfig(self) -> 'TerminationConfig':
        """
            Description copied from class: :meth:`~org.optaplanner.core.config.AbstractConfig.copyConfig`
            Typically implemented by constructing a new instance and calling
            :meth:`~org.optaplanner.core.config.AbstractConfig.inherit` on it
        
            Specified by:
                :meth:`~org.optaplanner.core.config.AbstractConfig.copyConfig` in
                class :class:`~org.optaplanner.core.config.AbstractConfig`
        
            Returns:
                new instance
        
        
        """
        ...
    def getBestScoreFeasible(self) -> bool: ...
    def getBestScoreLimit(self) -> str: ...
    def getDaysSpentLimit(self) -> int: ...
    def getHoursSpentLimit(self) -> int: ...
    def getMillisecondsSpentLimit(self) -> int: ...
    def getMinutesSpentLimit(self) -> int: ...
    def getScoreCalculationCountLimit(self) -> int: ...
    def getSecondsSpentLimit(self) -> int: ...
    def getSpentLimit(self) -> java.time.Duration: ...
    def getStepCountLimit(self) -> int: ...
    def getTerminationClass(self) -> typing.Type[org.optaplanner.core.impl.solver.termination.Termination]: ...
    def getTerminationCompositionStyle(self) -> TerminationCompositionStyle: ...
    def getTerminationConfigList(self) -> java.util.List['TerminationConfig']: ...
    def getUnimprovedDaysSpentLimit(self) -> int: ...
    def getUnimprovedHoursSpentLimit(self) -> int: ...
    def getUnimprovedMillisecondsSpentLimit(self) -> int: ...
    def getUnimprovedMinutesSpentLimit(self) -> int: ...
    def getUnimprovedScoreDifferenceThreshold(self) -> str: ...
    def getUnimprovedSecondsSpentLimit(self) -> int: ...
    def getUnimprovedSpentLimit(self) -> java.time.Duration: ...
    def getUnimprovedStepCountLimit(self) -> int: ...
    def inherit(self, terminationConfig: 'TerminationConfig') -> 'TerminationConfig':
        """
            Description copied from class: :meth:`~org.optaplanner.core.config.AbstractConfig.inherit`
            Inherits each property of the :code:`inheritedConfig` unless that property (or a semantic alternative) is defined by
            this instance (which overwrites the inherited behaviour).
        
            After the inheritance, if a property on this :class:`~org.optaplanner.core.config.AbstractConfig` composition is
            replaced, it should not affect the inherited composition instance.
        
            Specified by:
                :meth:`~org.optaplanner.core.config.AbstractConfig.inherit` in
                class :class:`~org.optaplanner.core.config.AbstractConfig`
        
            Parameters:
                inheritedConfig (:class:`~org.optaplanner.core.config.solver.termination.TerminationConfig`): never null
        
            Returns:
                this
        
        
        """
        ...
    def isConfigured(self) -> bool:
        """
            Return true if this TerminationConfig configures a termination condition. Note: this does not mean it will always
            terminate: ex: bestScoreLimit configured, but it is impossible to reach the bestScoreLimit.
        
        """
        ...
    def overwriteSpentLimit(self, duration: java.time.Duration) -> None: ...
    def overwriteUnimprovedSpentLimit(self, duration: java.time.Duration) -> None: ...
    def setBestScoreFeasible(self, boolean: bool) -> None: ...
    def setBestScoreLimit(self, string: str) -> None: ...
    def setDaysSpentLimit(self, long: int) -> None: ...
    def setHoursSpentLimit(self, long: int) -> None: ...
    def setMillisecondsSpentLimit(self, long: int) -> None: ...
    def setMinutesSpentLimit(self, long: int) -> None: ...
    def setScoreCalculationCountLimit(self, long: int) -> None: ...
    def setSecondsSpentLimit(self, long: int) -> None: ...
    def setSpentLimit(self, duration: java.time.Duration) -> None: ...
    def setStepCountLimit(self, integer: int) -> None: ...
    def setTerminationClass(self, class_: typing.Type[org.optaplanner.core.impl.solver.termination.Termination]) -> None: ...
    def setTerminationCompositionStyle(self, terminationCompositionStyle: TerminationCompositionStyle) -> None: ...
    def setTerminationConfigList(self, list: java.util.List['TerminationConfig']) -> None: ...
    def setUnimprovedDaysSpentLimit(self, long: int) -> None: ...
    def setUnimprovedHoursSpentLimit(self, long: int) -> None: ...
    def setUnimprovedMillisecondsSpentLimit(self, long: int) -> None: ...
    def setUnimprovedMinutesSpentLimit(self, long: int) -> None: ...
    def setUnimprovedScoreDifferenceThreshold(self, string: str) -> None: ...
    def setUnimprovedSecondsSpentLimit(self, long: int) -> None: ...
    def setUnimprovedSpentLimit(self, duration: java.time.Duration) -> None: ...
    def setUnimprovedStepCountLimit(self, integer: int) -> None: ...
    def shortenTimeMillisSpentLimit(self, long: int) -> None: ...
    def visitReferencedClasses(self, consumer: typing.Union[java.util.function.Consumer[typing.Type[typing.Any]], typing.Callable[[typing.Type[typing.Any]], None]]) -> None: ...
    def withBestScoreFeasible(self, boolean: bool) -> 'TerminationConfig': ...
    def withBestScoreLimit(self, string: str) -> 'TerminationConfig': ...
    def withDaysSpentLimit(self, long: int) -> 'TerminationConfig': ...
    def withHoursSpentLimit(self, long: int) -> 'TerminationConfig': ...
    def withMillisecondsSpentLimit(self, long: int) -> 'TerminationConfig': ...
    def withMinutesSpentLimit(self, long: int) -> 'TerminationConfig': ...
    def withScoreCalculationCountLimit(self, long: int) -> 'TerminationConfig': ...
    def withSecondsSpentLimit(self, long: int) -> 'TerminationConfig': ...
    def withSpentLimit(self, duration: java.time.Duration) -> 'TerminationConfig': ...
    def withStepCountLimit(self, integer: int) -> 'TerminationConfig': ...
    def withTerminationClass(self, class_: typing.Type[org.optaplanner.core.impl.solver.termination.Termination]) -> 'TerminationConfig': ...
    def withTerminationCompositionStyle(self, terminationCompositionStyle: TerminationCompositionStyle) -> 'TerminationConfig': ...
    def withTerminationConfigList(self, list: java.util.List['TerminationConfig']) -> 'TerminationConfig': ...
    def withUnimprovedDaysSpentLimit(self, long: int) -> 'TerminationConfig': ...
    def withUnimprovedHoursSpentLimit(self, long: int) -> 'TerminationConfig': ...
    def withUnimprovedMillisecondsSpentLimit(self, long: int) -> 'TerminationConfig': ...
    def withUnimprovedMinutesSpentLimit(self, long: int) -> 'TerminationConfig': ...
    def withUnimprovedScoreDifferenceThreshold(self, string: str) -> 'TerminationConfig': ...
    def withUnimprovedSecondsSpentLimit(self, long: int) -> 'TerminationConfig': ...
    def withUnimprovedSpentLimit(self, duration: java.time.Duration) -> 'TerminationConfig': ...
    def withUnimprovedStepCountLimit(self, integer: int) -> 'TerminationConfig': ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.optaplanner.core.config.solver.termination")``.

    TerminationCompositionStyle: typing.Type[TerminationCompositionStyle]
    TerminationConfig: typing.Type[TerminationConfig]
