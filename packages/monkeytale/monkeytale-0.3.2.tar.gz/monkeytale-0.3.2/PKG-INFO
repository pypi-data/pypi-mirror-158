Metadata-Version: 2.1
Name: monkeytale
Version: 0.3.2
Summary: An opinionated markup language for composing, documenting, and visualizing a novel.
License: Unlicense
Keywords: novel,structure,composition,documentation,visualization
Author-email: Monkeytale <monkeytale@dwlib.com>
Requires-Python: >=3.10
Classifier: Development Status :: 1 - Planning
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: The Unlicense (Unlicense)
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Documentation
Classifier: Topic :: Text Processing
Classifier: Topic :: Text Processing :: Linguistic
Classifier: Topic :: Text Processing :: Markup
Project-URL: Changelog, https://github.com/MLAOPDX/monkeytale/blob/main/CHANGELOG.md
Project-URL: Homepage, https://github.com/MLAOPDX/monkeytale/
Project-URL: Repository, https://github.com/MLAOPDX/monkeytale/
Description-Content-Type: text/markdown
Description: [![PyPI Version](https://img.shields.io/pypi/v/monkeytale.svg?style=for-the-badge)](https://pypi.org/project/monkeytale)
        [![Release Date](https://img.shields.io/github/release-date/MLAOPDX/monkeytale?style=for-the-badge)](https://github.com/MLAOPDX/monkeytale/releases)
        [![License](https://img.shields.io/github/license/MLAOPDX/monkeytale.svg?style=for-the-badge)](https://github.com/MLAOPDX/monkeytale/blob/main/LICENSE)
        </br>[![Issues](https://img.shields.io/github/issues/MLAOPDX/monkeytale.svg?style=for-the-badge)](https://github.com/MLAOPDX/monkeytale/issues)
        [![Language grade: Python](https://img.shields.io/lgtm/grade/python/github/MLAOPDX/monkeytale?style=for-the-badge)](https://lgtm.com/projects/g/MLAOPDX/monkeytale/context:python)
        
        # Monkeytale
        
        > "The book is a program." from [Pollen](https://docs.racket-lang.org/pollen/big-picture.html) by Matthew Butterick
        
        Monkeytale is a markup language for documenting and composing a story world and its novels. I am building this language to improve insight into my own writing and to learn more about software development.
        
        ## Design Principles
        
        To stay honest in the application of these principles, here's a useful bit to keep in mind:
        
        > "Special cases aren't special enough to break the rules, although practicality beats purity." from [The Zen of Python](https://peps.python.org/pep-0020/) by Tim Peters
        
        - **The book is a program.**</br>Monkeytale lives within your manuscript, within your notes, where you work.
        - **Document what is there. Plugin your own opinion.**</br>Monkeytale does not give advice on how to improve your writing. It's job is to collects information about your writing, so plugins can decide how to support your writing.
        - **Keeping it simple makes it durable.**</br>Monkeytale has a minimal syntax, no configuration, and uses flat text files.
        
        ## Planned Functionality
        
        As the second principle indicates, Monkeytale functionality comes in two parts. The core functionality documents as much as possible of what has been written. The second, through plugins, reports on that documented material.
        
        ### Monkeytale
        This will be core Monkeytale functionality, the result of which is exposed to the plugins to render different outputs.
        - Compose multiple narratives by (re-)using story components
        - Derive story structure from story components and their content
        - Provide plugin mount point for generation of documents from story structure extracted by Monkeytale
        - Execute from continuous integration server
        
        ### Plugin
        Anyone could write a plugin and make it available through PyPI and Monkeytale could make use of it. How Monkeytale knows which plugins to use without configuration remains a challenge to be conquered.
        
        - Generate ToDoTree configuration in .vscode/settings.json to help navigate story structure
        - Generate Markdown of each manuscript
        - Generate flow chart of scenes across PoV characters for each manuscript
        - Generate Markdown of backstory
        
        ## Dismissed Functionality
        - Advice on how to improve or correct the writing
        - Typography and formatting, other than emphasis (italics)
        - Tables of content and indexing
        - Project management and goal tracking (maybe when hard writing deadlines ever become a reality for me)
        
        ## Design Decisions
        - [Python 3](https://www.python.org/) will be the programming language for Monkeytale and the hooks for any plugins that folks might want to build
        - [Github Actions](https://github.com/features/actions) using Linux as execution platform
        - [Github Repo Fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo) as the delivery system.
        - Use .@ as the file extension to indicate Monkeytale files.
        - Single global namespace
        
        ## My environment of choice
        - [Visual Studio Code](https://code.visualstudio.com/) (VSCode) will be the text editor of choice
        - [GruntFuggly's ToDoTree](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree) extension for VS Code will be used to support navigation. Will need a plugin that updates ToDoTree configuration as needed.
        - [Markdown Preview Enhanced](https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced) extension for Markdown and Mermaid diagram display and conversion to docx using [PanDoc](https://pandoc.org/) and PDF using Safari.
        
        ## Development Progress
        
        [![GitHub top language](https://img.shields.io/github/languages/top/MLAOPDX/monkeytale.svg?style=for-the-badge)](../../)
        [![https://img.shields.io/pypi/pyversions/monkeytale?style=for-the-badge](https://img.shields.io/pypi/pyversions/monkeytale?style=for-the-badge)](https://pypi.org/project/monkeytale)
        [![Last commit](https://img.shields.io/github/last-commit/MLAOPDX/monkeytale.svg?style=for-the-badge)](../../commits/master)
        [![Commit activity](https://img.shields.io/github/commit-activity/m/MLAOPDX/monkeytale.svg?style=for-the-badge)](../../commits/master)
        [![PyPI Downloads](https://img.shields.io/pypi/dm/monkeytale.svg?style=for-the-badge)](https://pypistats.org/packages/licensecheck)
        [![PyPI Total Downloads](https://img.shields.io/badge/dynamic/json?style=for-the-badge&label=total%20downloads&query=%24.total_downloads&url=https%3A%2F%2Fapi.pepy.tech%2Fapi%2Fprojects%2Fmonkeytale)](https://pepy.tech/project/monkeytale)
        
        Monkeytale is developed in my spare time and uses [Semantic Versioning](https://semver.org/) and [Semantic Release](https://pypi.org/project/python-semantic-release/) to track its, equally spare, progress.
        
        As per Semantic Versioning: "Major version zero (0.y.z) is for initial development. Anything MAY change at any time. The public API SHOULD NOT be considered stable."
        
        Check the [change log](https://github.com/MLAOPDX/monkeytale/blob/main/CHANGELOG.md) for the latest updates.

