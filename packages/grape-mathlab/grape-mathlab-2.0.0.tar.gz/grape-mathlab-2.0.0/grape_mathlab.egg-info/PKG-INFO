Metadata-Version: 2.1
Name: grape-mathlab
Version: 2.0.0
Summary: GRAph Parallel Environment.
Home-page: https://github.com/mathLab/GRAPE
Author: Aurora Maurizio, Martina Teruzzi, Nicola Demo
Author-email: auroramaurizio1@gmail.com, teruzzi.martina@gmail.com, demo.nicola@gmail.com
License: MIT
Keywords: risk-analysis graph-theory parallel-programming shortest-path system-analysis fault-diagnostics
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.6
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Mathematics
Provides-Extra: docs
Provides-Extra: test
License-File: LICENSE

GRAPE is a Python package that takes advantage of Graph Theory into a High Performance Computing (HPC) environment to develop a screening tool aimed at studying the effect of different kinds of perturbations in interconnected systems, such as indsutrial plants.
The tool allows to represent the dependencies between components and predict the state of health and the residual functionality of degradable systems after a damage, suggesting the proper reconfiguration strategies to mitigate it. The results obtained from the graph analysis can be therefore used to improve topology, robustness, and resilience profile of industrial facilities against domino effect propagation.In particular, the components contribution to the cascade effects resulting from adverse events can be evaluated through centrality and efficiency measures, highlighting the plants major criticalities, vulnerabilities and potential weak points.
Considering that the most computationally expensive parts of the program involve the calculation of shortest paths, parallelization of shortest path computation in large unweighted graphs was integrated in the program. This was done taking advantage of the Python module multiprocessing. Two different sequential algorithms for the solution of the shortest path problem have been parallelized including a Single Source Shortest Path (SSSP) algorythm for sparse graphs and an All Pairs Shortest Path one (APSP) for dense graphs.
