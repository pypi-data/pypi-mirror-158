import json

import pickle
from .dialogue_graph import FrequencyDialogueGraph, dialogue2json, dgac
from datasets import load_dataset
import logging
import typing as tp
from pathlib import Path
from .dataset import DialogueDataset
import argparse
from .embedders import SentenceEmbedder


class AutoListEncoder(json.JSONEncoder):
    def default(self, o: tp.Any) -> tp.Any:
        return repr(o)


def gc(
        example_dialogues: tp.Union[str, Path],
        output_file: tp.Union[str, Path],
        pretrained_model: tp.Optional[tp.Union[str, Path]],
        dataset_from_huggingface: tp.Optional[tp.Union[str, Path]],
        dataset_from_file: tp.Optional[tp.Union[str, Path]],
        save_pretrained: tp.Optional[tp.Union[str, Path]],
) -> None:
    """Use example dialogues to construct a dialog flow graph saved in output_file.

    Args:
        example_dialogues: folder containing example dialogues
        output_file: file with the resulting structure
        pretrained_model: file previously generated by --save_pretrained
        dataset_from_huggingface: train graph model on a dataset from huggingface
        dataset_from_file: train graph model on a dataset stored locally
        save_pretrained: file to save trained model to

    """
    # check that only one way to make a graph
    assert int(pretrained_model is None) + int(dataset_from_huggingface is None)\
           + int(dataset_from_file is None) == 2, "Specify ONE way to build a graph"
    logging.basicConfig(filename="main.log", filemode="w", level=logging.INFO)

    result: tp.Dict[str, dialogue2json.Node] = {}

    if pretrained_model:
        with open(pretrained_model, "rb") as f:
            graph: FrequencyDialogueGraph = pickle.load(f)
        logging.info(f"Graph loaded from {pretrained_model}")
    else:
        if dataset_from_huggingface:
            train = load_dataset(dataset_from_huggingface)["train"]
        if dataset_from_file:
            with open(dataset_from_file, "r") as f:
                train = json.load(f)
        graph = dgac.dgac_two_stage(DialogueDataset.from_dataset(train), embedder=SentenceEmbedder())
        logging.info(f"Graph loaded from {dataset_from_file or dataset_from_huggingface}")

    if save_pretrained:
        with open(save_pretrained, "wb") as f:
            pickle.dump(graph, f)

    file_dir = Path(example_dialogues)
    logging.info(f"Example dialogues from {file_dir}")

    for file in file_dir.iterdir():
        logging.info(f"Adding {file}")
        dialogue2json.add_dialogue(file, graph, result)

    with open(output_file, "w") as f:
        json.dump(result, f, indent=4, cls=AutoListEncoder)
    logging.info(f"Result saved to {output_file}")


def gc_cli():
    parser = argparse.ArgumentParser(
        description="Use example dialogues to construct a dialog flow graph saved in output_file. "
    )
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "--pretrained-model",
        dest="pretrained_model",
        metavar="PATH_TO_MODEL",
        help="file previously generated by --save_pretrained",
        type=str,
        required=False
    )
    group.add_argument(
        "--dataset-from-huggingface",
        dest="dataset_from_huggingface",
        metavar="DATASET_NAME",
        help="train graph model on a dataset from huggingface",
        type=str,
        required=False
    )
    group.add_argument(
        "--dataset-from-file",
        dest="dataset_from_file",
        metavar="DATASET_FILE",
        help="train graph model on a dataset stored locally",
        type=str,
        required=False
    )
    parser.add_argument(
        "--save-pretrained",
        dest="save_pretrained",
        metavar="FILE_TO_SAVE_TO",
        help="file to save trained model to",
        type=str,
        required=False
    )
    parser.add_argument(
        "example_dialogues",
        metavar="EXAMPLE_DIRECTORY",
        help="directory containing example dialogues",
        type=str
    )
    parser.add_argument(
        "output_file",
        metavar="OUTPUT_FILE",
        help="file with the resulting structure",
        type=str
    )
    args = parser.parse_args()
    main(**vars(args))
