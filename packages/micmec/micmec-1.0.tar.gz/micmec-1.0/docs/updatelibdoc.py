#!/usr/bin/env python

from __future__ import print_function

import os
import sys
sys.path.insert(0, os.path.abspath(".."))

import importlib

import micmec
from glob import glob
from io import StringIO

from common import write_if_changed


def discover():
    # Find packages.
    packages = {"micmec": []}
    for fn in glob("../micmec/*/__init__.py"):
        subpackage = fn.split("/")[2]
        if subpackage == "test":
            continue
        packages["micmec.%s" % subpackage] = []
    # Find modules.
    for package, modules in packages.items():
        stub = package.replace(".", "/")
        for fn in glob("../%s/*.py" % stub) + glob("../%s/*.pyx" % stub):
            module = os.path.splitext(fn.split("/")[-1])[0]
            if module == "__init__" or module == "builder":
                continue
            modules.append(module)

    return packages


def get_first_docline(module):
    m = importlib.import_module(module)
    if m.__doc__ is not None:
        lines = m.__doc__.split("\n")
        if len(lines) > 0:
            return lines[0]
    return module + "." + "__init__.py"


def underline(line, char, f):
    f.write(line + u"\n")
    f.write(char*len(line) + u"\n")
    f.write(u"\n")


def main():
    packages = discover()

    # Write new/updated rst files if needed.
    fns_rst = []
    for package, modules in sorted(packages.items()):
        # Write the new file to a StringIO.
        f = StringIO()
        f.write(u"..\n")
        f.write(u"    This file is automatically generated. Do not make\n")
        f.write(u"    changes as these will be overwritten. Rather edit\n")
        f.write(u"    the docstrings in the source code.\n")
        f.write(u"\n")
        underline("``%s`` -- %s" % (package, get_first_docline(package)), "#", f)
        f.write(u"\n")

        for module in sorted(modules):
            f.write(u"\n")
            f.write(u"\n")
            full = package + "." + module
            underline(u"``%s`` -- %s" % (full, get_first_docline(full)), "=", f)
            f.write(u".. automodule:: " + full + "\n")
            f.write(u"    :members:\n")

        # Write if the contents have changed.
        fn_rst = "rg_%s.rst" % package.replace(".", "_")
        fns_rst.append(fn_rst)
        write_if_changed(fn_rst, f.getvalue())


    # Remove other .rst files.
    for fn_rst in glob("rg_micmec*.rst"):
        if fn_rst not in fns_rst:
            print("Removing %s" % fn_rst)
            os.remove(fn_rst)


if __name__ == "__main__":
    main()
