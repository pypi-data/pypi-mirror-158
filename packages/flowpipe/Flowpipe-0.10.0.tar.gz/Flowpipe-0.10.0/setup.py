# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['flowpipe']

package_data = \
{'': ['*']}

install_requires = \
['ascii-canvas>=1.3.5', 'strip-hints>=0.1.7']

extras_require = \
{':python_version >= "2.7" and python_version < "2.8"': ['ordereddict==1.1']}

setup_kwargs = {
    'name': 'flowpipe',
    'version': '0.10.0',
    'description': 'A lightweight framework for flow-based programming in python.',
    'long_description': '[![Version](https://img.shields.io/pypi/v/flowpipe.svg)](https://pypi.org/project/flowpipe/)\n[![Build Status](https://travis-ci.org/PaulSchweizer/flowpipe.svg?branch=master)](https://travis-ci.org/PaulSchweizer/flowpipe)\n[![Codacy_Badge_Grade](https://api.codacy.com/project/badge/Grade/6ac650d8580d43dbaf7de96a3171e76f)](https://www.codacy.com/app/paulschweizer/flowpipe?utm_source=github.com&utm_medium=referral&utm_content=PaulSchweizer/flowpipe&utm_campaign=Badge_Grade)\n\n<!-- Pytest Coverage Comment:Begin -->\n<a href="https://github.com/PaulSchweizer/flowpipe/blob/main/README.md"><img alt="Coverage" src="https://img.shields.io/badge/Coverage-100%25-brightgreen.svg" /></a><br/><details><summary>Coverage Report </summary><table><tr><th>File</th><th>Stmts</th><th>Miss</th><th>Cover</th></tr><tbody><tr><td><b>TOTAL</b></td><td><b>940</b></td><td><b>0</b></td><td><b>100%</b></td></tr></tbody></table></details>\n\n<!-- Pytest Coverage Comment:End -->\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](LICENSE) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/flowpipe) [![Documentation Status](https://readthedocs.org/projects/flowpipe/badge/?version=latest)](https://flowpipe.readthedocs.io/en/latest) [![Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n![Flowpipe Logo](https://raw.githubusercontent.com/PaulSchweizer/flowpipe/master/logo.png)\n\n# Flow-based Programming\n\nA lightweight framework for flow-based programming in python.\n\n```c\n+-------------------+          +---------------------+\n|   Invite People   |          |   Birthday Party    |\n|-------------------|          |---------------------|\no amount<4>         |   +----->o attendees<>         |\n|            people o---+ +--->o cake<>              |\n+-------------------+     |    +---------------------+\n                          |\n+-------------------+     |\n|    Bake a cake    |     |\n+-------------------+     |\no type<"Chocolate"> |     |\n|              cake o-----+\n+-------------------+\n```\n\nBenefits:\n\n- Visualize code\n- Re-usability\n- Streamlined code design\n- Built-in concurrency\n- Represent workflows one to one in the code\n\n# Quick Example\n\nConsider this simple example on how to represent the construction of a house with Flowpipe:\n\n```python\nfrom flowpipe import Graph, INode, Node, InputPlug, OutputPlug\n\n\nclass HireWorkers(INode):\n    """A node can be derived from the INode interface.\n\n    The plugs are defined in the init method.\n    The compute method received the inputs from any connected upstream nodes.\n    """\n\n    def __init__(self, amount=None, **kwargs):\n        super(HireWorkers, self).__init__(**kwargs)\n        InputPlug(\'amount\', self, amount)\n        OutputPlug(\'workers\', self)\n\n    def compute(self, amount):\n        workers = [\'John\', \'Jane\', \'Mike\', \'Michelle\']\n        print(\'{0} workers are hired to build the house.\'.format(amount))\n        return {\'workers.{0}\'.format(i): workers[i] for i in range(amount)}\n\n\n@Node(outputs=[\'workers\'])\ndef Build(workers, section):\n    """A node can also be created by the Node decorator.outputs\n\n    The inputs to the function are turned into InputsPlugs, otuputs are defined\n    in the decorator itself. The wrapped function is used as the compute method.\n    """\n    print(\'{0} are building the {1}\'.format(\', \'.join(workers.values()), section))\n    return {\'workers.{0}\'.format(i): worker for i, worker in workers.items()}\n\n\n@Node()\ndef Party(attendees):\n    print(\'{0} and {1} are having a great party!\'.format(\n        \', \'.join(list(attendees.values())[:-1]), list(attendees.values())[-1]))\n\n\n# Create a graph with the necessary nodes\ngraph = Graph(name=\'How to build a house\')\nworkers = HireWorkers(graph=graph, amount=4)\nbuild_walls = Build(graph=graph, name=\'Build Walls\', section=\'walls\')\nbuild_roof = Build(graph=graph, name=\'Build Roof\', section=\'roof\')\nparty = Party(graph=graph, name=\'Housewarming Party\')\n\n# Wire up the connections between the nodes\nworkers.outputs[\'workers\'][\'0\'].connect(build_walls.inputs[\'workers\'][\'0\'])\nworkers.outputs[\'workers\'][\'1\'].connect(build_walls.inputs[\'workers\'][\'1\'])\nworkers.outputs[\'workers\'][\'2\'].connect(build_roof.inputs[\'workers\'][\'0\'])\nworkers.outputs[\'workers\'][\'3\'].connect(build_roof.inputs[\'workers\'][\'1\'])\nbuild_walls.outputs[\'workers\'][\'0\'] >> party.inputs[\'attendees\'][\'0\']\nbuild_walls.outputs[\'workers\'][\'1\'] >> party.inputs[\'attendees\'][\'2\']\nbuild_roof.outputs[\'workers\'][\'0\'] >> party.inputs[\'attendees\'][\'1\']\nbuild_roof.outputs[\'workers\'][\'1\'] >> party.inputs[\'attendees\'][\'3\']\nparty.inputs[\'attendees\'][\'4\'].value = \'Homeowner\'\n```\n\nVisualize the code as a graph or as a listing:\n\n```python\nprint(graph.name)\nprint(graph)\nprint(graph.list_repr())\n```\n\nOutput:\n\n```c\nHow to build a house\n+------------------------+          +------------------------+          +---------------------------+\n|      HireWorkers       |          |       Build Roof       |          |    Housewarming Party     |\n|------------------------|          |------------------------|          |---------------------------|\no amount<4>              |          o section<"roof">        |          % attendees                 |\n|                workers %          % workers                |     +--->o  attendees.0<>            |\n|             workers.0  o-----+--->o  workers.0<>           |     |--->o  attendees.1<>            |\n|             workers.1  o-----|--->o  workers.1<>           |     |--->o  attendees.2<>            |\n|             workers.2  o-----|    |                workers %     |--->o  attendees.3<>            |\n|             workers.3  o-----|    |             workers.0  o-----|    o  attendees.4<"Homeowner>  |\n+------------------------+     |    |             workers.1  o-----|    +---------------------------+\n                               |    +------------------------+     |\n                               |    +------------------------+     |\n                               |    |      Build Walls       |     |\n                               |    |------------------------|     |\n                               |    o section<"walls">       |     |\n                               |    % workers                |     |\n                               +--->o  workers.0<>           |     |\n                               +--->o  workers.1<>           |     |\n                                    |                workers %     |\n                                    |             workers.0  o-----+\n                                    |             workers.1  o-----+\n                                    +------------------------+\n\nBuild a House\n HireWorkers\n  [i] amount: 4\n  [o] workers\n   [o] workers.0 >> Build Walls.workers.0\n   [o] workers.1 >> Build Walls.workers.1\n   [o] workers.2 >> Build Roof.workers.0\n   [o] workers.3 >> Build Roof.workers.1\n Build Roof\n  [i] section: "roof"\n  [i] workers\n   [i] workers.0 << HireWorkers.workers.2\n   [i] workers.1 << HireWorkers.workers.3\n  [o] workers\n   [o] workers.0 >> Housewarming Party.attendees.1\n   [o] workers.1 >> Housewarming Party.attendees.3\n Build Walls\n  [i] section: "walls"\n  [i] workers\n   [i] workers.0 << HireWorkers.workers.0\n   [i] workers.1 << HireWorkers.workers.1\n  [o] workers\n   [o] workers.0 >> Housewarming Party.attendees.0\n   [o] workers.1 >> Housewarming Party.attendees.2\n Housewarming Party\n  [i] attendees\n   [i] attendees.0 << Build Walls.workers.0\n   [i] attendees.1 << Build Roof.workers.0\n   [i] attendees.2 << Build Walls.workers.1\n   [i] attendees.3 << Build Roof.workers.1\n   [i] attendees.4: "Homeowner"\n```\n\nNow build the house:\n\n```python\ngraph.evaluate(mode=\'threading\')  # Options are linear, threading and multiprocessing\n```\n\nOutput:\n\n```c\n4 workers are hired to build the house.\nMichelle, Mike are building the roof\nJane, John are building the walls\nMike, John, Michelle, Jane and Homeowner are having a great party!\n```\n\n(Note: for more elaborate evaluation schemes, see [Evaluators](#evaluators))\n\nWe now know how to throw a party, so let\'s invite some people and re-use these skills for a birthday:\n\n```python\ngraph = Graph(name=\'How to throw a birthday party\')\n\n@Node(outputs=[\'people\'])\ndef InvitePeople(amount):\n    people = [\'John\', \'Jane\', \'Mike\', \'Michelle\']\n    d = {\'people.{0}\'.format(i): people[i] for i in range(amount)}\n    d[\'people\'] = {people[i]: people[i] for i in range(amount)}\n    return d\n\ninvite = InvitePeople(graph=graph, amount=4)\nbirthday_party = Party(graph=graph, name=\'Birthday Party\')\ninvite.outputs[\'people\'] >> birthday_party.inputs[\'attendees\']\n\nprint(graph.name)\nprint(graph)\ngraph.evaluate()\n```\n\nOutput:\n\n```c\nHow to throw a birthday party\n+-------------------+          +---------------------+\n|   InvitePeople    |          |   Birthday Party    |\n|-------------------|          |---------------------|\no amount<4>         |     +--->o attendees<>         |\n|            people o-----+    +---------------------+\n+-------------------+\n\nJane, Michelle, Mike and John are having a great party!\n```\n\n## More Examples\n\nThere are more examples for common use cases of flowpipe:\n\nThe code for these examples:\n[house_and_birthday.py](examples/house_and_birthday.py)!\n\nAnother simple example:\n[world_clock.py](examples/world_clock.py)!\n\nHow to make use of nested subgraphs:\n[nested_graphs.py](examples/nested_graphs.py)!\n\nUsing the command pattern with flowpipe successfully:\n[workflow_design_pattern.py](examples/workflow_design_pattern.py)!\n\nUse flowpipe on a remote cluster of machines, commonly refered to as a "render farm" in the VFX/Animation industry:\n[vfx_render_farm_conversion.py](examples/vfx_render_farm_conversion.py)!\n\nAn example graph showcasing a common workflow encountered in the VFX/Animation industry:\n[vfx_rendering.py](examples/vfx_rendering.py)!\n\n## VFX Pipeline\n\nIf you are working in the VFX/Animation industry, please check out this extensive guide on how to use [flowpipe in a vfx pipeline](flowpipe-for-vfx-pipelines.md)!\n\n# Evaluators\n\nIf your nodes just need sequential, threaded or multiprocessing evaluation, the `Graph.evaluate()` method will serve you just fine. If you want to take more control over the way your Graph is being evaluated, `Evaluators` are for you. This can also be used to add, e.g. logging or tracing to node evaluation.\n\nEvaluators allow you to take control of node evaluation order, or their scheduling.\nSee `flowpipe/evaluator.py` to see the `Graph.evaluate()` method\'s evaluation schemes.\n\nTo use a custom evaluator, subclass `flowpipe.evaluator.Evaluator`, and provide at least an `_evaluate_nodes(self, nodes)` method.\nThis method should take a list of nodes and call their respective `node.evalaute()` methods (along with any other task you want to do for each node being evaluated).\nTo use a cusom evaluator, create it and call its `Evalator.evaluate()` method with the Graph to evaluate as an argument:\n\n```py\nfrom flowpipe.evaluators import LinearEvaluator\n\n# assuming you created a graph to evaluate above, called `graph`\nlin_eval = LinearEvaluator()\nlin_eval.evaluate(graph)\n```\n',
    'author': 'Paul Schweizer',
    'author_email': 'paulschweizer@gmx.net',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/PaulSchweizer/flowpipe',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*',
}


setup(**setup_kwargs)
