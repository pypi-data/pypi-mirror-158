#:import pretty_space base_kivy_app.utils.pretty_space
#:import pretty_time base_kivy_app.utils.pretty_time

<RelativeStencilLayout@RelativeLayout+StencilView>

<RootAppWidget>:
    settings_pin_container: settings_pin_container
    orientation: 'vertical'
    spacing: '5dp'
    canvas:
        Color:
            rgba: app.theme.primary
        Rectangle:
            pos: self.pos
            size: self.size
    PlayerMetadata:
        padding: 0, '5dp', 0, '5dp'
    PlayerSelection:
        padding: '5dp', 0, 0, '10dp'
    RecordSelection
    BoxLayout:
        id: settings_pin_container
        size_hint_y: None
        height: self.minimum_height
        canvas:
            Color:
                rgba: app.theme.primary_text
            Rectangle:
                size: self.size
                pos: self.pos
    RelativeStencilLayout:
        on_size: image_display.reload_buffer()
        canvas:
            Color:
                rgba: [0, 0, 0, 1]
            Rectangle:
                size: self.size
        BufferImage:
            id: image_display
            on_kv_post: app.image_display = self
            auto_bring_to_front: False
            available_size: self.parent.size
            size: self.image_size
            size_hint: None, None

            do_scale: False
            do_translation: False, False
            do_rotation: False
            on_rotation: app.display_rotation = self.rotation
            rotation: app.display_rotation


<ConfigSelectLabelButton@FlatToggleButton>:
    disabled: app.player.play_state != 'none'
    group: 'video_radio_text_btn'
    allow_no_selection: False
    bold: True
    padding: '2dp', '5dp'
    size_hint: None, None
    size: self.texture_size
    flat_background_color: app.theme.accent

<ConfigSelectIconButton@FlatImageToggleButton>:
    disabled: app.player.play_state != 'none'
    group: 'video_radio_btn'
    source: 'radiobox-marked.png' if self.state == 'down' else 'radiobox-blank.png'
    flat_color: app.theme.accent


<PlayerSelection@BoxLayout>:
    size_hint: None, None
    size: self.minimum_width, '34dp'
    spacing: '5dp'
    BoxLayout:
        disabled: pin_btn.state == 'down'
        size_hint: None, None
        size: self.minimum_width, '34dp'
        ConfigSelectIconButton:
            state: ffmpeg.state
            on_state:
                ffmpeg.state = self.state
                if self.state == 'down': app.player = app.ffmpeg_player
                if self.state == 'down': app.player_name = 'ffmpeg'
        ConfigSelectLabelButton:
            id: ffmpeg
            text: 'Webcam/file'
            state: 'down' if app.player_name == 'ffmpeg' else 'normal'
        FlatImageButton:
            on_kv_post: self.more_widget = Factory.FFmpegSettingsDropdown()
            scale_down_color: True
            source: 'flat_dots_vertical.png'
            flat_color: app.theme.accent
            on_release: self.more_widget.open(root)
            disabled: ffmpeg.state != 'down'
        ConfigSelectIconButton:
            state: flir.state
            on_state:
                flir.state = self.state
                if self.state == 'down': app.player = app.flir_player
                if self.state == 'down': app.player_name = 'flir'
        ConfigSelectLabelButton:
            id: flir
            text: 'Flir'
            state: 'down' if app.player_name == 'flir' else 'normal'
        FlatImageButton:
            on_kv_post: self.more_widget = Factory.FlirSettingsDropdown()
            scale_down_color: True
            source: 'flat_dots_vertical.png'
            flat_color: app.theme.accent
            on_release: self.more_widget.open(root)
            disabled: flir.state != 'down'
        ConfigSelectIconButton:
            state: thor.state
            on_state:
                thor.state = self.state
                if self.state == 'down': app.player = app.thor_player
                if self.state == 'down': app.player_name = 'thor'
        ConfigSelectLabelButton:
            id: thor
            text: 'Thor'
            state: 'down' if app.player_name == 'thor' else 'normal'
        FlatImageButton:
            on_kv_post: self.more_widget = Factory.ThorSettingsDropdown()
            scale_down_color: True
            source: 'flat_dots_vertical.png'
            flat_color: app.theme.accent
            on_release: self.more_widget.open(root)
            disabled: thor.state != 'down'
        ConfigSelectIconButton:
            state: client_player.state
            on_state:
                client_player.state = self.state
                if self.state == 'down': app.player = app.client_player
                if self.state == 'down': app.player_name = 'client'
        ConfigSelectLabelButton:
            id: client_player
            text: 'Network'
            state: 'down' if app.player_name == 'client' else 'normal'
        FlatImageButton:
            on_kv_post: self.more_widget = Factory.ClientPlayerSettingsDropdown()
            scale_down_color: True
            source: 'flat_dots_vertical.png'
            flat_color: app.theme.accent
            on_release: self.more_widget.open(root)
            disabled: client_player.state != 'down'
        # ConfigSelectIconButton:
        #     state: rtv.state
        #     on_state:
        #         rtv.state = self.state
        #         if self.state == 'down': app.player = app.rtv_player
        #         if self.state == 'down': app.player_name = 'rtv'
        # ConfigSelectLabelButton:
        #     id: rtv
        #     text: 'RTV'
        #     state: 'down' if app.player_name == 'rtv' else 'normal'
        # FlatImageButton:
        #     on_kv_post: self.more_widget = Factory.RTVSettingsDropdown()
        #     scale_down_color: True
        #     source: 'flat_dots_vertical.png'
        #     flat_color: app.theme.accent
        #     on_release: self.more_widget.open(root)
        #     disabled: rtv.state != 'down'
    FlatImageToggleButton:
        source: 'flat_play.png' if self.state == 'normal' else 'flat_stop.png'
        flat_color: app.theme.accent
        disabled: not app.player.can_play or app.player.play_state == 'stopping'
        state: 'down' if app.player.play_state == 'starting' or app.player.play_state == 'playing' else 'normal'
        on_state: if self.state == 'normal': app.stop_recording()
        on_release: app.player.play() if self.state == 'down' else app.player.stop()
    FlatImageButton:
        scale_down_color: True
        source: 'rotate-right-variant.png'
        flat_color: app.theme.accent
        on_release: app.image_display.rotate_right_reposition()
    FlatImageToggleButton:
        id: pin_btn
        scale_down_color: True
        source: 'flat_pin.png' if self.state == 'normal' else 'flat_pin_off.png'
        flat_color: app.theme.accent
        on_release:
            settings = getattr(app, '{}_settings'.format(app.player_name))
            if self.state == 'down': self._old_settings_parent = settings.parent
            settings.parent.remove_widget(settings)
            if self.state == 'down': app.root.settings_pin_container.add_widget(settings)
            if self.state == 'normal': self._old_settings_parent.add_widget(settings)


<FFmpegSettingsDropdown@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, False
    FlatSplitter:
        size_hint: None, None
        height: self.minimum_height
        min_size: self.minimum_width
        sizable_from: 'right'
        flat_color: app.theme.accent
        on_kv_post: self.add_widget(app.ffmpeg_settings)


<FlirSettingsDropdown@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, False
    FlatSplitter:
        size_hint: None, None
        height: self.minimum_height
        min_size: self.minimum_width
        sizable_from: 'right'
        flat_color: app.theme.accent
        on_kv_post: self.add_widget(app.flir_settings)


<ThorSettingsDropdown@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, False
    FlatSplitter:
        size_hint: None, None
        height: self.minimum_height
        min_size: self.minimum_width
        sizable_from: 'right'
        flat_color: app.theme.accent
        on_kv_post: self.add_widget(app.thor_settings)


<ClientPlayerSettingsDropdown@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, False
    FlatSplitter:
        size_hint: None, None
        height: self.minimum_height
        min_size: self.minimum_width
        sizable_from: 'right'
        flat_color: app.theme.accent
        on_kv_post: self.add_widget(app.client_player_settings)


<RTVSettingsDropdown@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, False
    FlatSplitter:
        size_hint: None, None
        height: self.minimum_height
        min_size: self.minimum_width
        sizable_from: 'right'
        flat_color: app.theme.accent
        on_kv_post: self.add_widget(app.rtv_settings)


<PlayerMetadata@BoxLayout>:
    size_hint_y: None
    height: self.minimum_height
    size_hint_min_x: self.minimum_width
    spacing: '5dp'
    ThemedSizedLabel:
        text: 'Player:'
        padding_x: '10dp'
        bold: True
    ThemedSizedLabel:
        text: 'Estimated FPS: {}.'.format(int(app.player.real_rate))
    ThemedSizedLabel:
        text: 'Data rate: {}.'.format(pretty_space(app.player.data_rate, is_rate=True))
    ThemedLabel:
        text: app.player.player_summery
        shorten: True
        text_size: self.size


<RecordButton@FlatImageToggleButton>:
    recorder: None
    source: 'flat_record.png' if self.state == 'normal' else 'flat_stop.png'
    flat_color: app.theme.accent
    not_playing: app.player.play_state != 'playing' or not app.player.metadata_play_used or not getattr(app.player.metadata_play_used, 'rate')
    on_release: self.recorder.record(app.player) if self.state == 'down' else self.recorder.stop()


<RecordSelection@GridLayout>:
    size_hint_y: None
    height: self.minimum_height
    cols: 4
    spacing: '5dp'
    padding: '5dp', 0, 0, '5dp'
    ThemedSizedLabel:
        text: 'Image files: {}'.format(pretty_time(app.image_file_recorder.elapsed_record_time))
        bold: True
    RecordButton:
        recorder: app.image_file_recorder
        disabled: self.not_playing or not app.image_file_recorder.can_record or app.image_file_recorder.record_state == 'stopping'
        state: 'down' if app.image_file_recorder.record_state in ('starting', 'recording') else 'normal'
    FlatImageButton:
        on_kv_post: self.more_widget = Factory.ImageFileRecorderSettingsDropdown()
        scale_down_color: True
        source: 'flat_dots_vertical.png'
        flat_color: app.theme.accent
        on_release: self.more_widget.open(root)
    RecorderMetadata:
        recorder: app.image_file_recorder
    ThemedSizedLabel:
        text: 'Video file: {}'.format(pretty_time(app.video_recorder.elapsed_record_time))
        bold: True
    RecordButton:
        recorder: app.video_recorder
        disabled: self.not_playing or not app.video_recorder.can_record or app.video_recorder.record_state == 'stopping'
        state: 'down' if app.video_recorder.record_state in ('starting', 'recording') else 'normal'
    FlatImageButton:
        on_kv_post: self.more_widget = Factory.VideoRecorderSettingsDropdown()
        scale_down_color: True
        source: 'flat_dots_vertical.png'
        flat_color: app.theme.accent
        on_release: self.more_widget.open(root)
    RecorderMetadata:
        recorder: app.video_recorder
    ThemedSizedLabel:
        text: 'Network: {}'.format(pretty_time(app.server_recorder.elapsed_record_time))
        bold: True
    RecordButton:
        recorder: app.server_recorder
        disabled: self.not_playing or not app.server_recorder.can_record or app.server_recorder.record_state == 'stopping'
        state: 'down' if app.server_recorder.record_state in ('starting', 'recording') else 'normal'
    FlatImageButton:
        on_kv_post: self.more_widget = Factory.ServerRecorderSettingsDropdown()
        scale_down_color: True
        source: 'flat_dots_vertical.png'
        flat_color: app.theme.accent
        on_release: self.more_widget.open(root)
    RecorderMetadata:
        recorder: app.server_recorder


<ImageFileRecorderSettingsDropdown@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, False
    FlatSplitter:
        size_hint: None, None
        height: self.minimum_height
        min_size: self.minimum_width
        sizable_from: 'right'
        flat_color: app.theme.accent
        on_kv_post: self.add_widget(app.image_file_recorder_settings)


<VideoRecorderSettingsDropdown@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, False
    FlatSplitter:
        size_hint: None, None
        height: self.minimum_height
        min_size: self.minimum_width
        sizable_from: 'right'
        flat_color: app.theme.accent
        on_kv_post: self.add_widget(app.video_recorder_settings)


<ServerRecorderSettingsDropdown@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, False
    FlatSplitter:
        size_hint: None, None
        height: self.minimum_height
        min_size: self.minimum_width
        sizable_from: 'right'
        flat_color: app.theme.accent
        on_kv_post: self.add_widget(app.server_recorder_settings)


<RecorderMetadata>:
    size_hint_y: None
    height: self.minimum_height
    size_hint_min_x: self.minimum_width
    spacing: '5dp'
    ThemedSizedLabel:
        text: 'Size: {}.'.format(pretty_space(root.recorder.size_recorded) if root.recorder else '')
    ThemedSizedLabel:
        text: 'Data rate: {}.'.format(pretty_space(root.recorder.data_rate, is_rate=True) if root.recorder else '')
    ThemedSizedLabel:
        text: 'Skipped: {}.'.format(root.recorder.frames_skipped if root.recorder else '')
    ThemedLabel:
        text: root.recorder.recorder_summery if root.recorder else ''
        shorten: True
        text_size: self.size
