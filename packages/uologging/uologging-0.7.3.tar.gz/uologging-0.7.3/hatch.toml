# 
# This package is managed using Hatch: a modern, extensible Python project manager.
#
# > Additional Hatch-config for this project is in "pyproject.toml"
# 
# > See [Hatch Documentation](https://hatch.pypa.io/latest/).
#

[version]
path = "src/uologging/__init__.py"

[envs.env-vars]
HATCH_ENV_TYPE_VIRTUAL_PATH = "./venv"

[build.hooks.custom]  # See "hatch_build.py"

[build.targets.sdist]
[build.targets.wheel]


#
# "dev" environment: For developers who want to update this code base.
#
# EXAMPLE: Create dev environment, then enter dev shell
#  hatch env create dev
#  hatch --env dev shell
#
# EXAMPLE: Update dev environment
#  > Prequisite: kill any active shells (e.g. spawned via `hatch --env dev shell`).
#  hatch env remove dev
#  hatch env create dev
# 
# EXAMPLE: Run all the tests! This (roughly) ensures that cicd:test will succeed
#  hatch run dev:test
#
# EXAMPLE: Run all the tests, with code-coverage reports!
#  hatch run dev:test-coverage
#
[envs.dev]
python = "3.6"
dependencies = [
  "pytest",
  "pytest-coverage",
  "assertpy",
  "autopep8",
  "isort",
  "flake8",
  "hatchling",
]

[envs.dev.scripts]
test = "pytest --doctest-modules"
coveragee = "coverage run -m pytest --doctest-modules tests && coverage xml; coverage html;"

#
# "docs" environment: For viewing "docs/" directory, rendered by MkDocs.
# 
# EXAMPLE: Enable viewing docs at https://localhost:8000
#  hatch run docs:serve
#
# EXAMPLE: Build docs into an HTML static website.
#  hatch run docs:build
#
[envs.docs]
dependencies = [
  "mkdocs",
  "mkdocs-material",
]

[envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000"

#
# "cicd" environment: For Continuous Integration and Delivery (CICD) pipelines.
#
# EXAMPLE: Run tests in the context of CICD. Produces test_report.xml for junit report-readers.
#  hatch run cicd:test
#
[envs.cicd]
dependencies = [
    "pytest",
    "pytest-vcr",
    "assertpy",
    "hatchling",
]

[[envs.cicd.matrix]]
python = ["36", "38"]


[envs.cicd.scripts]
# TODO can we make the xml file name based on the matrix?
test = "pytest --doctest-modules --vcr-record=none --junitxml=test_report.xml src/ tests/"
infer-package-name = "echo uologging"

[envs.cicd.env-vars]
CI = "True"