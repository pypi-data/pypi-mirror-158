#!python
# This file is placed in the Public Domain.


"scan modules"


import importlib
import inspect
import os
import sys
import termios
import time
import traceback


sys.path.insert(0, os.getcwd())


from genocide.object import Class, Config, Default, items, spl
from genocide.handler import Callbacks, Commands, Event, Table, launch


def boot():
    e = Event()
    e.parse(" ".join(sys.argv[1:]))
    for k, v in items(e):
        setattr(Config, k, v)
    for o in Config.opts:
        if o == "-v":
           Config.verbose = True 
    return e


def init(pns):
    for pn in spl(pns):
        mod = importlib.import_module(pn)
        if "init" in dir(mod):
            mod.init()


def init2(mns):
    for mn in spl(mns):
        mod = Table.get(mn)
        if mod and "init" in dir(mod):
            try:
                mod.init()
            except Exception as ex:
                Callbacks.errors.append(ex)


def introspect(mod):
    for k, o in inspect.getmembers(mod, inspect.isfunction):
        if "event" in o.__code__.co_varnames[:o.__code__.co_argcount]:
            Commands.cmd[k] = o
    for k, clz in inspect.getmembers(mod, inspect.isclass):
        Class.add(clz)


def isopt(opts):
    for o in opts:
        if o in Config.opts:
            return True

def scan(dn, intro=False):
    mods = []
    for mod in scandir(dn):
        if intro:
            introspect(mod)
        Table.add(mod)
        mods.append(mod)
    return mods


def scandir(dn):
    dns = []
    if "." in dn:
        pn = dn
    else:
        pn = dn.split(os.sep)[-1]
    if os.path.exists(dn):
        dns.append(dn)
        sys.path.insert(0, dn)
    if not dns:
        try:
            pkg = importlib.import_module(dn)
            if pkg:
                if pkg.__file__:
                    dns.append(os.path.dirname(pkg.__file__))
                else:
                    dns.extend(pkg.__path__)
        except Exception as ex:
            dns = [dn,]
            Callbacks.errors.append(ex)
    result = []
    for dnn in dns:
        if not os.path.exists(dnn):
            continue
        for mn in os.listdir(dnn):
            if skip(mn):
                continue
            mn = mn[:-3]
            try:
                result.append(importlib.import_module(mn, pn))
            except Exception as ex:
                Callbacks.errors.append(ex)
    return result


def skip(fn):
    if not fn.endswith(".py"):
        return True
    if fn.endswith("~"):
        return True
    if fn.endswith("__.py"):
        return True
    return False


def wait():
    while 1:
        time.sleep(1.0)
        for err in Callbacks.errors:
            traceback.print_exception(type(err), err, err.__traceback__)

def wrap(func):
    fd = sys.stdin.fileno()
    gotterm = True
    try:
        old = termios.tcgetattr(fd)
    except termios.error:
        gotterm = False
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        if gotterm:
            termios.tcsetattr(fd, termios.TCSADRAIN, old)
            for err in Callbacks.errors:
                traceback.print_exception(type(err), err, err.__traceback__)


# This file is placed in the Public Domain.


"Prosecutor. Court. Reconsider OTP-CR-117/19."


import os
import readline
import sys
import time


sys.path.insert(0, os.getcwd())


from genocide.object import Config


Config.name = "genocide"
Config.threaded = False
Config.version = "161"
Config.workdir = os.path.expanduser("~/.genocide")


from genocide.irc import Config as IConfig


IConfig.cc = "!"
IConfig.channel = "#genocide"
IConfig.nick = "genocide"
IConfig.password = ""
IConfig.port = 6667
IConfig.realname = "Prosecutor. Court. Reconsider OTP-CR-117/19."
IConfig.sasl = False
IConfig.server = "localhost"
IConfig.servermodes = ""
IConfig.sleep = 60
IConfig.username = "genocide"
IConfig.users = False


from genocide.object import Class, Db, Object
from genocide.object import cdir, find, fntime, format, get, register, save, spl, update
from genocide.handler import Callbacks, CLI, Console, dispatch, starttime
from genocide.irc import IRC
from genocide.model import init as ginit
from genocide.rss import Fetcher


import genocide.all


class CLI(CLI):

    def raw(self, txt):
        print(txt)


class Console(Console):

    def raw(self, txt):
        print(txt)


def main():
    boot()
    cdir(Config.workdir)
    if len(sys.argv) > 1:
        c = CLI()
        return c.cmd(" ".join(sys.argv[1:]))
    print("GENOCIDE shell started at %s" % time.ctime(starttime).replace("  ", " "))
    print(format(Config, skip="password"))
    irc = IRC()
    irc.start()
    f = Fetcher()
    f.start()
    ginit()
    c = Console()
    c.start()
    c.forever()


wrap(main)
