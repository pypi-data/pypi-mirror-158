# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class UInt64(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UInt64()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUInt64(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def UInt64BufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x73\x63\x61\x6C", size_prefixed=size_prefixed
        )

    # UInt64
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UInt64
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint64Flags, o + self._tab.Pos
            )
        return 0


def UInt64Start(builder):
    builder.StartObject(1)


def Start(builder):
    return UInt64Start(builder)


def UInt64AddValue(builder, value):
    builder.PrependUint64Slot(0, value, 0)


def AddValue(builder, value):
    return UInt64AddValue(builder, value)


def UInt64End(builder):
    return builder.EndObject()


def End(builder):
    return UInt64End(builder)
