{"version":3,"file":"async-Geoman.js","mappings":"yKAaA,SAASA,EAAOC,GACd,IAAMC,GAAUC,EAAAA,EAAAA,cA0Fd,OArFFC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmBH,EAAQI,gBAAkBJ,EAAQK,IA4E3D,OAzEAF,EAAiBG,GAAGC,cAyEb,WACLJ,EAAiBG,GAAGE,iBACpBL,EAAiBG,GAAGG,iBAAiB,CAAEC,UAAU,OAElD,CAACV,IAIKW,MAAAA,cAAAA,MAAAA,SAAAA,MAGX,YAEAb,EAAOc,aAAeA,EAAAA,GACtBd,EAAOe,UAAYA,EAAAA","sources":["webpack:///./src/lib/fragments/Geoman.react.js"],"sourcesContent":["// import {useLeaflet, withLeaflet, MapControl} from \"react-leaflet\";\nimport {useLeaflet} from \"react-leaflet\";\n// import L from 'leaflet';\n// import PropTypes from \"prop-types\";\n// import Geoman1 from \"./Geoman1.react\";\nimport \"@geoman-io/leaflet-geoman-free\";\nimport \"@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css\";\n// import \"leaflet/dist/leaflet.css\";\nimport {useEffect} from \"react\";\n\nimport {propTypes, defaultProps} from '../components/Geoman.react';\n\n\nfunction Geoman(props) {\n  const context = useLeaflet();\n  // console.log('props', props)\n  // console.log('context', context)\n  // const context = useLeafletContext();\n\n  useEffect(() => {\n    const leafletContainer = context.layerContainer || context.map;\n    // console.log('leafletContainer.pm', leafletContainer.pm)\n\n    leafletContainer.pm.addControls(\n    //     {\n    //   drawMarker: false\n    // }\n    );\n\n    // L.marker([51.50915, -0.096112], { pmIgnore: true }).addTo(leafletContainer);\n    // L.marker([52.50915, -0.096112]).addTo(leafletContainer);\n    // L.polygon([[51.50915, -0.096112], [52.50915, -0.096112], [52.50915, -1.106112]]).addTo(leafletContainer);\n\n    // leafletContainer.pm.setGlobalOptions({ pmIgnore: false });\n\n    // leafletContainer.on(\"pm:create\", (e) => {\n    //   if (e.layer && e.layer.pm) {\n    //     const shape = e;\n    //     console.log('pm:create', e);\n    //\n    //     // enable editing of circle\n    //     shape.layer.pm.enable();\n    //\n    //     console.log(`object created: ${shape.layer.pm.getShape()}`);\n    //     // console.log(leafletContainer.pm.getGeomanLayers(true).toGeoJSON());\n    //     leafletContainer.pm\n    //       .getGeomanLayers(true)\n    //       .bindPopup(\"i am whole\")\n    //       .openPopup();\n    //\n    //     leafletContainer.pm\n    //       .getGeomanLayers()\n    //       .map((layer, index) => layer.bindPopup(`I am figure N° ${index}`));\n    //\n    //     shape.layer.on(\"pm:edit\", (e) => {\n    //       const event = e;\n    //       // console.log(leafletContainer.pm.getGeomanLayers(true).toGeoJSON());\n    //     });\n    //   }\n    // });\n    //\n    // leafletContainer.on(\"pm:remove\", (e) => {\n    //   console.log(\"object removed\");\n    //   // console.log(leafletContainer.pm.getGeomanLayers(true).toGeoJSON());\n    // });\n\n    // leafletContainer.pm.setLang('ru');\n    // leafletContainer.pm.Toolbar.copyDrawControl('Rectangle', {\n    //   name: 'RectangleCopy',\n    //   block: 'custom',\n    //   title: 'Display text on hover button',\n    //   actions: [\n    //   // uses the default 'cancel' action\n    //   'cancel',\n    //   // creates a new action that has text, no click event\n    //   { text: 'Custom text, no click' },\n    //   // creates a new action with text and a click event\n    //   {\n    //     text: 'click me',\n    //     onClick: () => {\n    //       console.log('🙋‍♂️');\n    //     },\n    //   },\n    // ],\n    // });\n\n    // leafletContainer.on('pm:drawstart', (e) => {\n    //     console.log(e);\n    //     e.workingLayer.on('pm:vertexadded', (e) => {\n    //         console.log(e);\n    //     });\n    // });\n    // leafletContainer.on('pm:create', (e) => {\n    //     console.log(e);\n    // });\n\n    return () => {\n      leafletContainer.pm.removeControls();\n      leafletContainer.pm.setGlobalOptions({ pmIgnore: true });\n    };\n  }, [context]);\n\n  // return new React.Element();\n  // return null;\n    return <></>\n}\n\nexport default Geoman;\n\nGeoman.defaultProps = defaultProps;\nGeoman.propTypes = propTypes;\n"],"names":["Geoman","props","context","useLeaflet","useEffect","leafletContainer","layerContainer","map","pm","addControls","removeControls","setGlobalOptions","pmIgnore","React","defaultProps","propTypes"],"sourceRoot":""}