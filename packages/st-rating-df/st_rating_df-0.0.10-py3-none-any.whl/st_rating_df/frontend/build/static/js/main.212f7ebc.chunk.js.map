{"version":3,"sources":["CustomDataframe.tsx","index.tsx"],"names":["Table","state","checks","range","props","element","dataRows","map","index","content","getCell","evaluationColumn","formatedContent","Number","result","filename","headers","columns","String","createDownloadFiles","colsToDownload","i","length","column","indexOf","push","setState","date","Date","toISOString","split","toLocaleTimeString","replace","getMilliseconds","addClick","row","rating","selection","console","log","smile","Streamlit","setComponentValue","render","table","hasHeader","headerRows","hasData","caption","width","height","size","overflow","className","style","isHeader","clickFunction","colSpan","data","enclosingCharacter","onClick","React","PureComponent","TableRows","rows","startRow","endRow","tableRows","rowIndex","key","TableRow","passRow","e","target","id","cells","columnIndex","formattedContent","type","toString","scope","dangerouslySetInnerHTML","__html","Error","Evaluation","style1","backgroundColor","color","border","name1","style2","name2","style3","name3","click","button1","document","getElementsByName","button2","button3","setOnClicked","setOnNotClicked","unclickAll","button","background","padding","name","withStreamlitConnection","useEffect","setFrameHeight","args","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.212f7ebc.chunk.js","sourcesContent":["import { range } from \"lodash\"\nimport React, { Fragment, ReactNode, useEffect } from \"react\"\nimport {\n  ArrowTable,\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport { CSVLink, CSVDownload } from \"react-csv\"\n\n//the props of the Table class\ninterface TableProps {\n  element: ArrowTable,\n  evaluationColumn: number,\n  colsToDownload: string[]\n  width: number,\n  height: number\n}\n\n//the type of the state\ntype MyState = {\n  checks: number[];\n  result: (string | number)[][];\n  filename: string;\n  headers: string[]\n}\n\nclass Table extends React.PureComponent<TableProps> {\n\n\n  state: MyState = {\n    //an array with the length of the number of data Rows is created\n    checks: range(0, this.props.element.dataRows).map((index) => {\n      //with a map function the array is filled with the booleans of the checkbox column\n      var content = this.props.element.getCell(index + 1, this.props.evaluationColumn + 1).content\n      var formatedContent = 0\n      if (content !== null)\n        formatedContent = Number(content)\n      return formatedContent\n    }),\n    result: [[]],\n    filename: \"empty-rating.csv\",\n    headers: range(0, this.props.element.columns).map((index) => {\n      return String(this.props.element.getCell(0, index).content)\n    })\n  }\n\n  public createDownloadFiles = (): void => {\n    let result: (string | number)[][] = [this.props.colsToDownload]\n    for (let i = 0; i < this.state.checks.length; i++) {\n      if (this.state.checks[i] !== 0) {\n        let element = []\n        for (const column of result[0]) {\n          if (column !== 'Rating') {\n            const content = this.props.element.getCell(i + 1, this.state.headers.indexOf(String(column))).content\n            element.push(content !== null ? String(content) : ' ')\n          }else{\n            element.push(this.state.checks[i])\n          }\n        }\n        result.push(element)\n      }\n\n    }\n    this.setState({ result: result })\n\n    let date = new Date()\n    const myDate = date.toISOString().split('T')[0]\n    const myTime = date.toLocaleTimeString().replace(':', '-').replace(':', '-')\n    const filename = 'smiles_rating_' + myDate + '_' + myTime + '-' + date.getMilliseconds() + '.csv'\n\n    this.setState({ filename: filename })\n\n  }\n\n\n  public addClick = (row: number, rating: number, selection: boolean): void => {\n    //the checks array is updated with the value of the clicked checkbox\n    this.state.checks[row - 1] = selection ? rating : 0;\n    console.log(this.state.checks);\n\n    const smile = String(this.props.element.getCell(row, this.state.headers.indexOf(String('path'))).content)\n    Streamlit.setComponentValue([smile, selection ? rating : 0])\n  }\n\n  public render = (): ReactNode => {\n    const table = this.props.element //the arrow table\n    const hasHeader = table.headerRows > 0 //if there are over 0 headerRows the table has a header\n    const hasData = table.dataRows > 0 //if there are over 0 dataRows the table has data\n    const caption = table.caption ? <caption>{table.caption}</caption> : null\n\n    // the width and height that is passed through the props\n    const width = this.props.width + 'px'\n    const height = this.props.height + 'px'\n\n    let size = {}\n    if (this.props.width < 0) {\n      size = { height: height, overflow: 'scroll' }\n    }\n    else {\n      size = { height: height, width: width, overflow: 'scroll' }\n    }\n\n    return (\n\n      <div className=\"body\">\n        <div style={size} >\n          <table >\n            {caption}\n            {hasHeader && (\n              <thead>\n                <TableRows isHeader={true} table={table} clickFunction={this.addClick} evaluationColumn={this.props.evaluationColumn + 1}\n                /*the addClick function is passed down so that lower classes can call it and it is executed here*/ />\n              </thead>\n            )}\n            <tbody>\n              {hasData ? (\n                <TableRows isHeader={false} table={table} clickFunction={this.addClick} evaluationColumn={this.props.evaluationColumn + 1} />\n              ) : (\n                <tr>\n                  <td colSpan={table.columns || 1}>empty</td>\n                </tr>\n              )}\n            </tbody>\n          </table >\n        </div>\n        <CSVLink className='myButton' data={this.state.result} enclosingCharacter={``} filename={this.state.filename} onClick={this.createDownloadFiles}>Download Rating</CSVLink>\n      </div>\n    )\n  }\n\n}\n\n/**\n * Purely functional component returning a list of rows.\n *\n * isHeader     - Whether to display the header.\n * table        - The table to display.\n */\n\ninterface TableRowsProps {\n  isHeader: boolean\n  table: ArrowTable\n  clickFunction: any\n  evaluationColumn: number\n}\n\nconst TableRows: React.SFC<TableRowsProps> = (props) => {\n  const { isHeader, table } = props //the props deconstructed into isHeader and table\n  const { headerRows, rows } = table //the table deconstructed into headerRows and normal rows\n\n  //if the rows are header rows this elements uses the rows from 0 to the number of header rows\n  //if the rows are not header rows the rows from the number of header rows to the number of rows are used\n  const startRow = isHeader ? 0 : headerRows\n  const endRow = isHeader ? headerRows : rows\n\n  //an array is created from start to endRow and it is used to map over each row\n  const tableRows = range(startRow, endRow).map((rowIndex) => (\n    <tr key={rowIndex}>\n      <TableRow rowIndex={rowIndex} table={table} clickFunction={props.clickFunction} evaluationColumn={props.evaluationColumn} />\n    </tr>\n  ))\n\n  return <Fragment>{tableRows}</Fragment>\n}\n\n/**\n * Purely functional component returning a list entries for a row.\n *\n * rowIndex - The row index.\n * table    - The table to display.\n */\n\ninterface TableRowProps {\n  rowIndex: number\n  table: ArrowTable\n  clickFunction: any\n  evaluationColumn: number\n}\n\nconst TableRow: React.SFC<TableRowProps> = (props) => {\n  const { rowIndex, table } = props\n  const { columns } = table\n\n  //the function that was passed down from the table class is called with the row index and if the checkbox was checked\n  const passRow = (e: any) => {\n    props.clickFunction(rowIndex, Number(e[1].target.id), e[0])\n  }\n\n  // an array from 0 to the number of columns is created and used as a column index with map\n  const cells = range(0, columns).map((columnIndex) => {\n    //content is the data and type can either be blank, index, data or columns (titles)\n    const { content, type } = table.getCell(rowIndex, columnIndex)\n\n    //the content is formated so that it can be diplayed\n    let formattedContent\n    if (content !== null) {\n      formattedContent = content.toString()\n    } else {\n      formattedContent = \"\"\n    }\n\n\n    const id = rowIndex + '-' + columnIndex\n\n    switch (type) {\n      case \"blank\": {\n        return <th key={id} />\n      }\n      case \"index\": {\n        return (\n          <th key={id} scope=\"row\" >\n            {formattedContent}\n          </th>\n        )\n      }\n      case \"columns\": {\n        return (\n          <th key={id} scope=\"col\" id={id}>\n            {formattedContent}\n          </th>\n        )\n      }\n      case \"data\": {\n        //if the content does not contain a html image\n        if (formattedContent.indexOf('<img src=') === -1) {\n          //either return a checked or unchecked checkbox depending on the data\n          if (columnIndex === props.evaluationColumn) {\n            return (\n              <td id={id} key={id} >\n                <Evaluation row={rowIndex} formattedContent={formattedContent} passRow={passRow} /></td>\n            )\n          }\n          //if there is no checkbox just diplay the content\n          return (\n            <td key={id} id={id}>\n              {formattedContent}\n            </td>\n          )\n        } else {\n          //display the content as HTML\n          return (\n            <td key={id} id={id}>\n              <div dangerouslySetInnerHTML={{ __html: formattedContent }} />\n            </td>\n          )\n        }\n      }\n      default: {\n        throw new Error(`Cannot parse type \"${type}\".`)\n      }\n    }\n  })\n\n  return <Fragment>{cells}</Fragment>\n}\n\ninterface EvaluationProps {\n  row: number,\n  formattedContent: string,\n  passRow: any\n}\n\nconst Evaluation: React.SFC<EvaluationProps> = (props) => {\n\n  let style1 = { backgroundColor: 'red', color: 'black', border: '2px solid black' }\n  let name1 = props.row + \"_1\"\n  let style2 = { backgroundColor: 'yellow', color: 'black', border: '2px solid black' }\n  let name2 = props.row + \"_2\"\n  let style3 = { backgroundColor: 'green', color: 'black', border: '2px solid black' }\n  let name3 = props.row + \"_3\"\n\n  if (props.formattedContent === '1')\n    style1 = { backgroundColor: 'black', color: 'white', border: '2px solid red' }\n  else if (props.formattedContent === '2')\n    style2 = { backgroundColor: 'black', color: 'white', border: '2px solid yellow' }\n  else if (props.formattedContent === '3')\n    style3 = { backgroundColor: 'black', color: 'white', border: '2px solid green' }\n\n  const click = (e: any) => {\n    let selection = true\n    let button1 = document.getElementsByName(name1)[0]\n    let button2 = document.getElementsByName(name2)[0]\n    let button3 = document.getElementsByName(name3)[0]\n    if (button1 !== null) {\n      if (e.target.id === '1') {\n        if (button1.style.backgroundColor !== 'black') {\n          setOnClicked(button1)\n          setOnNotClicked(button2)\n          setOnNotClicked(button3)\n        } else {\n          unclickAll(button1, button2, button3)\n          selection = false\n        }\n      } else if (e.target.id === '2') {\n        if (button2.style.backgroundColor !== 'black') {\n          setOnNotClicked(button1)\n          setOnClicked(button2)\n          setOnNotClicked(button3)\n        } else {\n          unclickAll(button1, button2, button3)\n          selection = false\n        }\n      } else {\n        if (button3.style.backgroundColor !== 'black') {\n          setOnNotClicked(button1)\n          setOnNotClicked(button2)\n          setOnClicked(button3)\n        } else {\n          unclickAll(button1, button2, button3)\n          selection = false\n        }\n      }\n    }\n    props.passRow([selection, e])\n  }\n\n  const unclickAll = (button1: any, button2: any, button3: any) => {\n    setOnNotClicked(button3)\n    setOnNotClicked(button2)\n    setOnNotClicked(button1)\n  }\n\n  const setOnClicked = (button: any) => {\n    button.style.border = \"2px solid \" + button.style.backgroundColor\n    button.style.background = 'black'\n    button.style.color = 'white'\n  }\n  const setOnNotClicked = (button: any) => {\n    if (button.id === '1')\n      button.style.background = 'red'\n    else if (button.id === '2')\n      button.style.background = 'yellow'\n    else\n      button.style.background = 'green'\n    button.style.border = \"2px solid black\"\n    button.style.color = 'black'\n  }\n\n  return <div style={{ padding: '15px' }}>\n    <div><button onClick={click} name={name1} id='1' style={style1}>1</button></div>\n    <div><button onClick={click} name={name2} id='2' style={style2}>2</button></div>\n    <div><button onClick={click} name={name3} id='3' style={style3}>3</button></div>\n  </div>\n}\n\n\n/**\n * Dataframe example using Apache Arrow.\n */\nconst CustomDataframe: React.FC<ComponentProps> = (props) => {\n\n  useEffect(() => {\n    Streamlit.setFrameHeight()\n  })\n\n  return <Table element={props.args.data} evaluationColumn={props.args.evaluationColumn} colsToDownload={props.args.colsToDownload} width={props.args.width} height={props.args.height} />\n}\n\nexport default withStreamlitConnection(CustomDataframe)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CustomDataframe from \"./CustomDataframe\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CustomDataframe />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}