{"version":3,"sources":["steamlit-gosling.tsx","index.tsx"],"names":["withStreamlitConnection","props","args","id","spec","height","eventType","exportButton","gosAPI","gosRef","useRef","useEffect","Streamlit","setFrameHeight","currentRef","current","api","subscribe","type","eventData","setComponentValue","data","unsubscribe","viewId","action","duration","viewIds","getViewIds","includes","position","padding","zoomTo","zoomToExtent","gene","zoomToGene","console","warn","ref","JSON","parse","margin","border","className","theme","onClick","exportPdf","exportPng","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSA+HeA,G,OAAAA,aAzFmB,SAACC,GACjC,MAAqEA,EAAMC,KAAnEC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,OAAQC,EAA1B,EAA0BA,UAAWC,EAArC,EAAqCA,aAAcC,EAAnD,EAAmDA,OAE7CC,EAASC,iBAAmB,MAoDlC,OAhDAC,qBAAU,WACRC,IAAUC,eAAeR,MAO3BM,qBAAU,WACR,IAAMG,EAAaL,EAAOM,QAC1B,GAAID,GAAcR,EAMhB,OAJAQ,EAAWE,IAAIC,UAAUX,GAAW,SAACY,EAAMC,GACzCP,IAAUQ,kBAAkBD,EAAUE,SAGjC,WACK,OAAVP,QAAU,IAAVA,KAAYE,IAAIM,YAAYhB,MAG/B,CAACG,EAAOM,QAAST,IAGpBK,qBAAU,WACR,GAAIF,EAAOM,SAAWP,EAAQ,CAC5B,IAAQe,EAA6Bf,EAA7Be,OAAQC,EAAqBhB,EAArBgB,OAAQC,EAAajB,EAAbiB,SAClBC,EAAUjB,EAAOM,QAAQC,IAAIW,aACnC,GAAID,EAAQE,SAASL,GACnB,GAAe,WAAXC,EAAqB,CACvB,MAA8BhB,EAAtBqB,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,QAClBrB,EAAOM,QAAQC,IAAIe,OAAOR,EAAQM,EAAUC,QACvC,GAAe,iBAAXN,EACTf,EAAOM,QAAQC,IAAIgB,aAAaT,EAAQE,QACnC,GAAe,eAAXD,EAAyB,CAClC,MAA0BhB,EAAlByB,EAAR,EAAQA,KAAMH,EAAd,EAAcA,QACdrB,EAAOM,QAAQC,IAAIkB,WAAWX,EAAQU,EAAMH,EAASL,QAErDU,QAAQC,KAAR,iBAAuBZ,EAAvB,2BAIFW,QAAQC,KAAR,UAAgBb,EAAhB,8BAA4CG,OAI/C,CAAClB,IAIF,oCACE,kBAAC,IAAD,CAEE6B,IAAK5B,EACLL,KAAMkC,KAAKC,MAAMnC,GAEjBoC,OAAQ,EACRV,QAAS,GACTW,OAAQ,OACRtC,GAAIA,EACJuC,UAAW,6BAEXC,MAAO,UAGRpC,GAAgB,yBAAKmC,UAAU,eAAf,SAEf,yBAAKA,UAAU,YACb,4BAAQE,QAAS,kCAAMnC,EAAOM,eAAb,aAAM,EAAgBC,IAAI6B,cAA3C,OACA,4BAAQD,QAAS,kCAAMnC,EAAOM,eAAb,aAAM,EAAgBC,IAAI8B,cAA3C,cC7GVC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.9b6ea508.chunk.js","sourcesContent":["import {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps\n} from \"streamlit-component-lib\"\nimport React, { useRef, useEffect } from \"react\"\n\nimport { GoslingComponent } from 'gosling.js';\nimport { GoslingRef } from 'gosling.js/dist/src/core/gosling-component';\n\nimport './streamlit-gosling.css'\ntype ZoomToAPI = {\n  action: \"zoomTo\", viewId: string, position: string, padding?: number, duration?: number\n}\n\ntype ZoomToExtentAPI = {\n  action: \"zoomToExtent\", viewId: string, duration?: number\n}\n\ntype ZoomToGeneAPI = {\n  action: \"zoomToGene\", viewId: string, gene: string, padding?: number, duration?: number\n}\ntype GosAPI = ZoomToAPI | ZoomToExtentAPI | ZoomToGeneAPI\n\n\ninterface Props {\n  id: string\n  spec: string,\n  height: number,\n  eventType: 'rawData' | 'mouseOver' | 'click' | 'rangeSelect',\n  exportButton: boolean,\n  gosAPI?: GosAPI\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst StreamlitGoslingComponent = (props: ComponentProps) => {\n  const { id, spec, height, eventType, exportButton, gosAPI }: Props = props.args\n\n  const gosRef = useRef<GoslingRef>(null)\n\n  // set frame height\n  // otherwise, the height of iframe is 0\n  useEffect(() => {\n    Streamlit.setFrameHeight(height)\n  });\n\n\n\n\n  // subscribe event\n  useEffect(() => {\n    const currentRef = gosRef.current\n    if (currentRef && eventType) {\n\n      currentRef.api.subscribe(eventType, (type, eventData) => {\n        Streamlit.setComponentValue(eventData.data);\n      });\n\n      return () => {\n        currentRef?.api.unsubscribe(eventType);\n      };\n    }\n  }, [gosRef.current, eventType]);\n\n\n  useEffect(() => {\n    if (gosRef.current && gosAPI) {\n      const { viewId, action, duration } = gosAPI\n      const viewIds = gosRef.current.api.getViewIds()\n      if (viewIds.includes(viewId)) {\n        if (action === 'zoomTo') {\n          const { position, padding } = gosAPI as ZoomToAPI\n          gosRef.current.api.zoomTo(viewId, position, padding)\n        } else if (action === 'zoomToExtent') {\n          gosRef.current.api.zoomToExtent(viewId, duration)\n        } else if (action === 'zoomToGene') {\n          const { gene, padding } = gosAPI as ZoomToGeneAPI\n          gosRef.current.api.zoomToGene(viewId, gene, padding, duration)\n        } else {\n          console.warn(`action ${action} is not supported`)\n        }\n\n      } else {\n        console.warn(`${viewId} does not exist in ${viewIds}`)\n      }\n\n    }\n  }, [gosAPI])\n\n\n  return (\n    <>\n      <GoslingComponent\n        // Gosling specification\n        ref={gosRef}\n        spec={JSON.parse(spec)}\n        // Styles of Gosling Component\n        margin={0}\n        padding={30}\n        border={'none'}\n        id={id}\n        className={\"my-gosling-component-style\"}\n        // Styling theme (refer to https://github.com/gosling-lang/gosling-theme)\n        theme={'light'}\n      />\n\n      {exportButton && <div className='export-meun'>\n        Export\n        <div className='sub-meun'>\n          <button onClick={() => gosRef.current?.api.exportPdf()}>pdf</button>\n          <button onClick={() => gosRef.current?.api.exportPng()}>png</button>\n        </div>\n      </div>}\n\n\n    </>\n  )\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StreamlitGoslingComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitGosling from \"./steamlit-gosling\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitGosling />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}