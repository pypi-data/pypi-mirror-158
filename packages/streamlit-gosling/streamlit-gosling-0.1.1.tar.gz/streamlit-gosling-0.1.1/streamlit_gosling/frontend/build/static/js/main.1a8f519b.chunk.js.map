{"version":3,"sources":["steamlit-gosling.tsx","index.tsx"],"names":["withStreamlitConnection","props","args","id","spec","height","eventType","exportButton","gosRef","useRef","useEffect","Streamlit","setFrameHeight","current","api","subscribe","type","eventData","setComponentValue","data","unsubscribe","ref","JSON","parse","margin","padding","border","className","theme","onClick","exportPdf","exportPng","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSA0FeA,G,OAAAA,aAhEmB,SAACC,GACjC,MAA6DA,EAAMC,KAA3DC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,OAAQC,EAA1B,EAA0BA,UAAWC,EAArC,EAAqCA,aAE/BC,EAASC,iBAAmB,MA2BlC,OAvBAC,qBAAU,WACRC,IAAUC,eAAeP,MAM3BK,qBAAU,WAER,GAAIF,EAAOK,SAAWP,EAMpB,OAJEE,EAAOK,QAAQC,IAAIC,UAAUT,GAAW,SAACU,EAAMC,GAC3CN,IAAUO,kBAAkBD,EAAUE,SAGrC,WAAO,IAAD,EACT,UAAAX,EAAOK,eAAP,SAAgBC,IAAIM,YAAYd,MAGrC,CAACE,EAAOK,UAKT,oCACA,kBAAC,IAAD,CAEEQ,IAAKb,EACLJ,KAAMkB,KAAKC,MAAMnB,GAEjBoB,OAAQ,EACRC,QAAS,GACTC,OAAQ,OACRvB,GAAIA,EACJwB,UAAW,6BAEXC,MAAO,UAGRrB,GAAgB,yBAAKoB,UAAU,eAAf,SAEf,yBAAKA,UAAU,YACb,4BAAQE,QAAS,kCAAIrB,EAAOK,eAAX,aAAI,EAAgBC,IAAIgB,cAAzC,OACA,4BAAQD,QAAS,kCAAIrB,EAAOK,eAAX,aAAI,EAAgBC,IAAIiB,cAAzC,cCxERC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1a8f519b.chunk.js","sourcesContent":["import {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps\n} from \"streamlit-component-lib\"\nimport React, { useRef, useEffect } from \"react\"\n\nimport { GoslingComponent, GoslingSpec} from 'gosling.js';\nimport { GoslingApi } from 'gosling.js/dist/src/core/api';\nimport {GoslingRef} from 'gosling.js/dist/src/core/gosling-component';\n\nimport './streamlit-gosling.css'\n\ninterface Props {\n  id: string\n  spec: string,\n  height: number,\n  gosApi: GoslingApi,\n  eventType: 'rawData' | 'mouseOver' | 'click' | 'rangeSelect',\n  exportButton: boolean \n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst StreamlitGoslingComponent = (props: ComponentProps) => {\n  const { id, spec, height, eventType, exportButton }: Props = props.args\n\n  const gosRef = useRef<GoslingRef>(null)\n\n  // set frame height\n  // otherwise, the height of iframe is 0\n  useEffect(() => {\n    Streamlit.setFrameHeight(height)\n  });\n\n\n\n\n  useEffect(() => {\n\n    if (gosRef.current && eventType) {\n        \n        gosRef.current.api.subscribe(eventType, (type, eventData) => {\n            Streamlit.setComponentValue(eventData.data);\n        });\n      \n      return () => {\n          gosRef.current?.api.unsubscribe(eventType);\n      };\n    }\n  }, [gosRef.current]);\n  \n\n\n  return (\n    <>\n    <GoslingComponent\n      // Gosling specification\n      ref={gosRef}\n      spec={JSON.parse(spec)}\n      // Styles of Gosling Component\n      margin={0}\n      padding={30}\n      border={'none'}\n      id={id}\n      className={\"my-gosling-component-style\"}\n      // Styling theme (refer to https://github.com/gosling-lang/gosling-theme)\n      theme={'light'}\n    />\n\n    {exportButton && <div className='export-meun'>\n      Export\n      <div className='sub-meun'>\n        <button onClick={()=>gosRef.current?.api.exportPdf()}>pdf</button>\n        <button onClick={()=>gosRef.current?.api.exportPng()}>png</button>\n      </div>\n    </div>}\n\n    \n    </>\n  )\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StreamlitGoslingComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitGosling from \"./steamlit-gosling\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitGosling />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}