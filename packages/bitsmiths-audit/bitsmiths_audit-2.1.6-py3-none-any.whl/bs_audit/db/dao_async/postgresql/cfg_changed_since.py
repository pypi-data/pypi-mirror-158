# This file was generated by mettle.genes.db.GenPy3 [ver 2.1] on Wed Jul  6 10:16:56 2022
#  Target Database = postgresql
#
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_audit.db.tables.icfg_changed_since import iCfgChangedSince
from bs_audit.db.tables.ocfg_changed_since import oCfgChangedSince

class dCfgChangedSince:

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self._dbcon   = dbcon
        self._dbstmnt = None
        self.irec     = iCfgChangedSince()
        self.orec     = None
    def __enter__(self):
        """
        With statement enter.
        """
        return self

    def __exit__(self, type, value, traceback):
        """
        With statement exit.
        """
        self._destroy()

    def _destroy(self):
        self._dbstmnt = None

    async def exec_deft(self,
                        since: datetime.datetime,
                        criteria: str) -> "dCfgChangedSince":
        """
        Execute the query by setting all the inputs.

        :param since: datetime.datetime
        :param criteria: str
        :return: Self for convenience.
        """
        self.irec.since = since
        self.irec.criteria = criteria

        return await self.exec()

    async def exec(self, irec: iCfgChangedSince = None) -> "dCfgChangedSince":
        """
        Execute the query, optionally passing in the input rec.

        :param irec:
        :return: Self for convenience.
        """
        if irec:
            self.irec._copy_from(irec)

        self._destroy()

        self._dbstmnt = await self._dbcon.statement("CfgChangedSince", self._dbcon.STMNT_TYPE_READ)

        self._dbstmnt.sql("""select
  c.id,
from
  audit.cfg c
where
  last_chg >= :since
  [criteria]""")

        self._dbstmnt.dynamic("[criteria]", self.irec.criteria)

        self._dbstmnt.bind_in("since", self.irec.since, datetime.datetime)

        self._dbstmnt.bind_out("id", str)

        await self._dbcon.execute(self._dbstmnt)

        if irec:
            irec._copy_from(self.irec)

        return self

    async def fetch(self) -> bool:
        """
        Fetches the next row from the executed query.

        :return: True if a row was fetched, else False.
        """
        if not await self._dbcon.fetch(self._dbstmnt):
            return False

        self.orec = oCfgChangedSince()

        self.orec.id = self._dbstmnt.result[0]

        return True

    async def fetch_iter(self) -> oCfgChangedSince:
        """
        Yield all the rows one at a time.

        :return: Iterator for output rows
        """
        while await self.fetch():
            yield self.orec

    async def fetch_all(self, out_list: oCfgChangedSince.List, clearList: bool = True) -> int:
        """
        Fetch all the rows into the specified list and return the list count.

        :param out_list:
        :param clearList:
        :return: Number of rows fetched.
        """
        if clearList:
            out_list.clear()

        while await self.fetch():
            out_list.append(self.orec)

        return len(out_list)

