// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/memory/memory_case.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto;
namespace oneflow {
class CudaPinnedMemory;
class CudaPinnedMemoryDefaultTypeInternal;
extern CudaPinnedMemoryDefaultTypeInternal _CudaPinnedMemory_default_instance_;
class DeviceCudaMemory;
class DeviceCudaMemoryDefaultTypeInternal;
extern DeviceCudaMemoryDefaultTypeInternal _DeviceCudaMemory_default_instance_;
class HostMemory;
class HostMemoryDefaultTypeInternal;
extern HostMemoryDefaultTypeInternal _HostMemory_default_instance_;
class MemoryCase;
class MemoryCaseDefaultTypeInternal;
extern MemoryCaseDefaultTypeInternal _MemoryCase_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::CudaPinnedMemory* Arena::CreateMaybeMessage<::oneflow::CudaPinnedMemory>(Arena*);
template<> ::oneflow::DeviceCudaMemory* Arena::CreateMaybeMessage<::oneflow::DeviceCudaMemory>(Arena*);
template<> ::oneflow::HostMemory* Arena::CreateMaybeMessage<::oneflow::HostMemory>(Arena*);
template<> ::oneflow::MemoryCase* Arena::CreateMaybeMessage<::oneflow::MemoryCase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class CudaPinnedMemory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.CudaPinnedMemory) */ {
 public:
  CudaPinnedMemory();
  virtual ~CudaPinnedMemory();

  CudaPinnedMemory(const CudaPinnedMemory& from);
  CudaPinnedMemory(CudaPinnedMemory&& from) noexcept
    : CudaPinnedMemory() {
    *this = ::std::move(from);
  }

  inline CudaPinnedMemory& operator=(const CudaPinnedMemory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CudaPinnedMemory& operator=(CudaPinnedMemory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CudaPinnedMemory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CudaPinnedMemory* internal_default_instance() {
    return reinterpret_cast<const CudaPinnedMemory*>(
               &_CudaPinnedMemory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CudaPinnedMemory& a, CudaPinnedMemory& b) {
    a.Swap(&b);
  }
  inline void Swap(CudaPinnedMemory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CudaPinnedMemory* New() const final {
    return CreateMaybeMessage<CudaPinnedMemory>(nullptr);
  }

  CudaPinnedMemory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CudaPinnedMemory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CudaPinnedMemory& from);
  void MergeFrom(const CudaPinnedMemory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CudaPinnedMemory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.CudaPinnedMemory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
  };
  // required int64 device_id = 1;
  bool has_device_id() const;
  void clear_device_id();
  ::PROTOBUF_NAMESPACE_ID::int64 device_id() const;
  void set_device_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.CudaPinnedMemory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 device_id_;
  friend struct ::TableStruct_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto;
};
// -------------------------------------------------------------------

class HostMemory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.HostMemory) */ {
 public:
  HostMemory();
  virtual ~HostMemory();

  HostMemory(const HostMemory& from);
  HostMemory(HostMemory&& from) noexcept
    : HostMemory() {
    *this = ::std::move(from);
  }

  inline HostMemory& operator=(const HostMemory& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostMemory& operator=(HostMemory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostMemory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostMemory* internal_default_instance() {
    return reinterpret_cast<const HostMemory*>(
               &_HostMemory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HostMemory& a, HostMemory& b) {
    a.Swap(&b);
  }
  inline void Swap(HostMemory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostMemory* New() const final {
    return CreateMaybeMessage<HostMemory>(nullptr);
  }

  HostMemory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostMemory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostMemory& from);
  void MergeFrom(const HostMemory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostMemory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.HostMemory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCudaPinnedMemFieldNumber = 1,
  };
  // optional .oneflow.CudaPinnedMemory cuda_pinned_mem = 1;
  bool has_cuda_pinned_mem() const;
  void clear_cuda_pinned_mem();
  const ::oneflow::CudaPinnedMemory& cuda_pinned_mem() const;
  ::oneflow::CudaPinnedMemory* release_cuda_pinned_mem();
  ::oneflow::CudaPinnedMemory* mutable_cuda_pinned_mem();
  void set_allocated_cuda_pinned_mem(::oneflow::CudaPinnedMemory* cuda_pinned_mem);

  // @@protoc_insertion_point(class_scope:oneflow.HostMemory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::oneflow::CudaPinnedMemory* cuda_pinned_mem_;
  friend struct ::TableStruct_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto;
};
// -------------------------------------------------------------------

class DeviceCudaMemory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.DeviceCudaMemory) */ {
 public:
  DeviceCudaMemory();
  virtual ~DeviceCudaMemory();

  DeviceCudaMemory(const DeviceCudaMemory& from);
  DeviceCudaMemory(DeviceCudaMemory&& from) noexcept
    : DeviceCudaMemory() {
    *this = ::std::move(from);
  }

  inline DeviceCudaMemory& operator=(const DeviceCudaMemory& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceCudaMemory& operator=(DeviceCudaMemory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceCudaMemory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceCudaMemory* internal_default_instance() {
    return reinterpret_cast<const DeviceCudaMemory*>(
               &_DeviceCudaMemory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceCudaMemory& a, DeviceCudaMemory& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceCudaMemory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceCudaMemory* New() const final {
    return CreateMaybeMessage<DeviceCudaMemory>(nullptr);
  }

  DeviceCudaMemory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceCudaMemory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceCudaMemory& from);
  void MergeFrom(const DeviceCudaMemory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceCudaMemory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.DeviceCudaMemory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
  };
  // required int64 device_id = 1;
  bool has_device_id() const;
  void clear_device_id();
  ::PROTOBUF_NAMESPACE_ID::int64 device_id() const;
  void set_device_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.DeviceCudaMemory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 device_id_;
  friend struct ::TableStruct_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto;
};
// -------------------------------------------------------------------

class MemoryCase :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.MemoryCase) */ {
 public:
  MemoryCase();
  virtual ~MemoryCase();

  MemoryCase(const MemoryCase& from);
  MemoryCase(MemoryCase&& from) noexcept
    : MemoryCase() {
    *this = ::std::move(from);
  }

  inline MemoryCase& operator=(const MemoryCase& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryCase& operator=(MemoryCase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoryCase& default_instance();

  enum CaseCase {
    kHostMem = 1,
    kDeviceCudaMem = 2,
    CASE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryCase* internal_default_instance() {
    return reinterpret_cast<const MemoryCase*>(
               &_MemoryCase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MemoryCase& a, MemoryCase& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryCase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryCase* New() const final {
    return CreateMaybeMessage<MemoryCase>(nullptr);
  }

  MemoryCase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryCase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoryCase& from);
  void MergeFrom(const MemoryCase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryCase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.MemoryCase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostMemFieldNumber = 1,
    kDeviceCudaMemFieldNumber = 2,
  };
  // optional .oneflow.HostMemory host_mem = 1;
  bool has_host_mem() const;
  void clear_host_mem();
  const ::oneflow::HostMemory& host_mem() const;
  ::oneflow::HostMemory* release_host_mem();
  ::oneflow::HostMemory* mutable_host_mem();
  void set_allocated_host_mem(::oneflow::HostMemory* host_mem);

  // optional .oneflow.DeviceCudaMemory device_cuda_mem = 2;
  bool has_device_cuda_mem() const;
  void clear_device_cuda_mem();
  const ::oneflow::DeviceCudaMemory& device_cuda_mem() const;
  ::oneflow::DeviceCudaMemory* release_device_cuda_mem();
  ::oneflow::DeviceCudaMemory* mutable_device_cuda_mem();
  void set_allocated_device_cuda_mem(::oneflow::DeviceCudaMemory* device_cuda_mem);

  void clear_case();
  CaseCase case_case() const;
  // @@protoc_insertion_point(class_scope:oneflow.MemoryCase)
 private:
  class _Internal;
  void set_has_host_mem();
  void set_has_device_cuda_mem();

  inline bool has_case() const;
  inline void clear_has_case();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union CaseUnion {
    CaseUnion() {}
    ::oneflow::HostMemory* host_mem_;
    ::oneflow::DeviceCudaMemory* device_cuda_mem_;
  } case_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CudaPinnedMemory

// required int64 device_id = 1;
inline bool CudaPinnedMemory::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CudaPinnedMemory::clear_device_id() {
  device_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CudaPinnedMemory::device_id() const {
  // @@protoc_insertion_point(field_get:oneflow.CudaPinnedMemory.device_id)
  return device_id_;
}
inline void CudaPinnedMemory::set_device_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  device_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CudaPinnedMemory.device_id)
}

// -------------------------------------------------------------------

// HostMemory

// optional .oneflow.CudaPinnedMemory cuda_pinned_mem = 1;
inline bool HostMemory::has_cuda_pinned_mem() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HostMemory::clear_cuda_pinned_mem() {
  if (cuda_pinned_mem_ != nullptr) cuda_pinned_mem_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::oneflow::CudaPinnedMemory& HostMemory::cuda_pinned_mem() const {
  const ::oneflow::CudaPinnedMemory* p = cuda_pinned_mem_;
  // @@protoc_insertion_point(field_get:oneflow.HostMemory.cuda_pinned_mem)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::CudaPinnedMemory*>(
      &::oneflow::_CudaPinnedMemory_default_instance_);
}
inline ::oneflow::CudaPinnedMemory* HostMemory::release_cuda_pinned_mem() {
  // @@protoc_insertion_point(field_release:oneflow.HostMemory.cuda_pinned_mem)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::CudaPinnedMemory* temp = cuda_pinned_mem_;
  cuda_pinned_mem_ = nullptr;
  return temp;
}
inline ::oneflow::CudaPinnedMemory* HostMemory::mutable_cuda_pinned_mem() {
  _has_bits_[0] |= 0x00000001u;
  if (cuda_pinned_mem_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::CudaPinnedMemory>(GetArenaNoVirtual());
    cuda_pinned_mem_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.HostMemory.cuda_pinned_mem)
  return cuda_pinned_mem_;
}
inline void HostMemory::set_allocated_cuda_pinned_mem(::oneflow::CudaPinnedMemory* cuda_pinned_mem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cuda_pinned_mem_;
  }
  if (cuda_pinned_mem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cuda_pinned_mem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cuda_pinned_mem, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cuda_pinned_mem_ = cuda_pinned_mem;
  // @@protoc_insertion_point(field_set_allocated:oneflow.HostMemory.cuda_pinned_mem)
}

// -------------------------------------------------------------------

// DeviceCudaMemory

// required int64 device_id = 1;
inline bool DeviceCudaMemory::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceCudaMemory::clear_device_id() {
  device_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceCudaMemory::device_id() const {
  // @@protoc_insertion_point(field_get:oneflow.DeviceCudaMemory.device_id)
  return device_id_;
}
inline void DeviceCudaMemory::set_device_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  device_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.DeviceCudaMemory.device_id)
}

// -------------------------------------------------------------------

// MemoryCase

// optional .oneflow.HostMemory host_mem = 1;
inline bool MemoryCase::has_host_mem() const {
  return case_case() == kHostMem;
}
inline void MemoryCase::set_has_host_mem() {
  _oneof_case_[0] = kHostMem;
}
inline void MemoryCase::clear_host_mem() {
  if (has_host_mem()) {
    delete case_.host_mem_;
    clear_has_case();
  }
}
inline ::oneflow::HostMemory* MemoryCase::release_host_mem() {
  // @@protoc_insertion_point(field_release:oneflow.MemoryCase.host_mem)
  if (has_host_mem()) {
    clear_has_case();
      ::oneflow::HostMemory* temp = case_.host_mem_;
    case_.host_mem_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::HostMemory& MemoryCase::host_mem() const {
  // @@protoc_insertion_point(field_get:oneflow.MemoryCase.host_mem)
  return has_host_mem()
      ? *case_.host_mem_
      : *reinterpret_cast< ::oneflow::HostMemory*>(&::oneflow::_HostMemory_default_instance_);
}
inline ::oneflow::HostMemory* MemoryCase::mutable_host_mem() {
  if (!has_host_mem()) {
    clear_case();
    set_has_host_mem();
    case_.host_mem_ = CreateMaybeMessage< ::oneflow::HostMemory >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.MemoryCase.host_mem)
  return case_.host_mem_;
}

// optional .oneflow.DeviceCudaMemory device_cuda_mem = 2;
inline bool MemoryCase::has_device_cuda_mem() const {
  return case_case() == kDeviceCudaMem;
}
inline void MemoryCase::set_has_device_cuda_mem() {
  _oneof_case_[0] = kDeviceCudaMem;
}
inline void MemoryCase::clear_device_cuda_mem() {
  if (has_device_cuda_mem()) {
    delete case_.device_cuda_mem_;
    clear_has_case();
  }
}
inline ::oneflow::DeviceCudaMemory* MemoryCase::release_device_cuda_mem() {
  // @@protoc_insertion_point(field_release:oneflow.MemoryCase.device_cuda_mem)
  if (has_device_cuda_mem()) {
    clear_has_case();
      ::oneflow::DeviceCudaMemory* temp = case_.device_cuda_mem_;
    case_.device_cuda_mem_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::DeviceCudaMemory& MemoryCase::device_cuda_mem() const {
  // @@protoc_insertion_point(field_get:oneflow.MemoryCase.device_cuda_mem)
  return has_device_cuda_mem()
      ? *case_.device_cuda_mem_
      : *reinterpret_cast< ::oneflow::DeviceCudaMemory*>(&::oneflow::_DeviceCudaMemory_default_instance_);
}
inline ::oneflow::DeviceCudaMemory* MemoryCase::mutable_device_cuda_mem() {
  if (!has_device_cuda_mem()) {
    clear_case();
    set_has_device_cuda_mem();
    case_.device_cuda_mem_ = CreateMaybeMessage< ::oneflow::DeviceCudaMemory >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.MemoryCase.device_cuda_mem)
  return case_.device_cuda_mem_;
}

inline bool MemoryCase::has_case() const {
  return case_case() != CASE_NOT_SET;
}
inline void MemoryCase::clear_has_case() {
  _oneof_case_[0] = CASE_NOT_SET;
}
inline MemoryCase::CaseCase MemoryCase::case_case() const {
  return MemoryCase::CaseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fmemory_2fmemory_5fcase_2eproto
