# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

try:
    import otg_pb2 as otg__pb2
except ImportError:
    from snappi_convergence import otg_pb2 as otg__pb2


class OpenapiStub(object):
    """Description missing in models
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetConfig = channel.unary_unary(
                '/otg.Openapi/SetConfig',
                request_serializer=otg__pb2.SetConfigRequest.SerializeToString,
                response_deserializer=otg__pb2.SetConfigResponse.FromString,
                )
        self.SetState = channel.unary_unary(
                '/otg.Openapi/SetState',
                request_serializer=otg__pb2.SetStateRequest.SerializeToString,
                response_deserializer=otg__pb2.SetStateResponse.FromString,
                )
        self.SendPing = channel.unary_unary(
                '/otg.Openapi/SendPing',
                request_serializer=otg__pb2.SendPingRequest.SerializeToString,
                response_deserializer=otg__pb2.SendPingResponse.FromString,
                )
        self.GetResults = channel.unary_unary(
                '/otg.Openapi/GetResults',
                request_serializer=otg__pb2.GetResultsRequest.SerializeToString,
                response_deserializer=otg__pb2.GetResultsResponse.FromString,
                )


class OpenapiServicer(object):
    """Description missing in models
    """

    def SetConfig(self, request, context):
        """Sets the configuration of a traffic generator for convergence measurements.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetState(self, request, context):
        """Updates the state of the traffic generator.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPing(self, request, context):
        """API to send an IPv4 and/or IPv6 ICMP Echo Request(s) between endpoints. For each
        endpoint 1 ping packet will be sent and API shall wait for ping response to either
        be successful or timeout. The API wait timeout for each request is 300ms.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResults(self, request, context):
        """Request flow metrics or flow convergence measurements.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OpenapiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConfig,
                    request_deserializer=otg__pb2.SetConfigRequest.FromString,
                    response_serializer=otg__pb2.SetConfigResponse.SerializeToString,
            ),
            'SetState': grpc.unary_unary_rpc_method_handler(
                    servicer.SetState,
                    request_deserializer=otg__pb2.SetStateRequest.FromString,
                    response_serializer=otg__pb2.SetStateResponse.SerializeToString,
            ),
            'SendPing': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPing,
                    request_deserializer=otg__pb2.SendPingRequest.FromString,
                    response_serializer=otg__pb2.SendPingResponse.SerializeToString,
            ),
            'GetResults': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResults,
                    request_deserializer=otg__pb2.GetResultsRequest.FromString,
                    response_serializer=otg__pb2.GetResultsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'otg.Openapi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Openapi(object):
    """Description missing in models
    """

    @staticmethod
    def SetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/otg.Openapi/SetConfig',
            otg__pb2.SetConfigRequest.SerializeToString,
            otg__pb2.SetConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/otg.Openapi/SetState',
            otg__pb2.SetStateRequest.SerializeToString,
            otg__pb2.SetStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendPing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/otg.Openapi/SendPing',
            otg__pb2.SendPingRequest.SerializeToString,
            otg__pb2.SendPingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/otg.Openapi/GetResults',
            otg__pb2.GetResultsRequest.SerializeToString,
            otg__pb2.GetResultsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
