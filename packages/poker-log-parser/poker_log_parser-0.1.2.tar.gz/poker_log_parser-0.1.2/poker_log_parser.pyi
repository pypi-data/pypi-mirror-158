from datetime import datetime
from typing import List, Iterator, TypeVar, Generic, Union

def parse_str(src: str) -> 'HandView': ...
def parse_path(path: str) -> 'HandView': ...
def parse_strs(srcs: List[str]) -> List['HandView']: ...
def parse_paths(paths: List[str]) -> List['HandView']: ...

# def combine(views: List['HandView']) -> 'HandView': ...

# def to_bytes(view: 'HandView') -> bytes: ...
# def from_bytes(data: bytes) -> 'HandView': ...

# def save(view: 'HandView', path: str): ...
# def load(path: str) -> 'HandView': ...

def to_json(view: 'HandView') -> str: ...
# def from_json(data: str) -> 'HandView': ...

def to_json_ohh(view: 'HandView') -> str: ...
# def from_json_ohh(data: str) -> 'HandView': ...


T = TypeVar("T")

class _View(Generic[T]):
    def __len__(self) -> int: ...

    def __getitem__(self, index: Union[int, slice]) -> T: ...

    def __iter__(self) -> Iterator[T]: ...

    def __repr__(self) -> str: ...

    def __str__(self) -> str: ...


class PlayerView(_View['Player']):
    pass

class WinnerView(_View['Winner']):
    pass

class ActionView(_View['Action']):
    pass

class FlopView(_View['Street']):
    pass

class TurnView(_View['Street']):
    pass

class RiverView(_View['Street']):
    pass

class ShowdownView(_View['Street']):
    pass

class Cards(_View['Card']):
    pass

class HandView(_View['Hand']):
    pass
    # @staticmethod
    # def load(path: str) -> 'HandView': ...
    # def save(self, path: str): ...
    
    # @staticmethod
    # def from_bytes(data: bytes) -> 'HandView': ...
    # def to_bytes(self) -> bytes: ...

    # @staticmethod
    # def from_json(data: str) -> 'HandView': ...
    # def to_json(self) -> str: ...

    # @staticmethod
    # def from_json_ohh(data: str) -> 'HandView': ...
    # def to_json_ohh(self) -> str: ...



class Hand:
    @property
    def header(self) -> 'Header': ...

    @property
    def preflop(self) -> 'Street': ...

    @property
    def summary(self) -> 'Summary': ...

    @property
    def flops(self) -> FlopView: ...

    @property
    def turns(self) -> TurnView: ...

    @property
    def rivers(self) -> RiverView: ...

    @property
    def showdowns(self) -> ShowdownView: ...


class Header:
    @property
    def site(self) -> PokerSite: ...

    @property
    def game_type(self) -> GameType: ...

    @property
    def id(self) -> str: ...

    @property
    def table_name(self) -> str: ...

    @property
    def currency(self) -> str: ...

    @property
    def is_tournament(self) -> bool: ...

    @property
    def max_players(self) -> int: ...

    @property
    def players(self) -> PlayerView: ...

    @property
    def dealer(self) -> int: ... # property to get player?
    
    @property
    def hero(self) -> int: ... # property to get player?
    
    @property
    def ante(self) -> float: ...

    @property
    def big_blind(self) -> float: ...

    @property
    def small_blind(self) -> float: ...

    @property
    def bet_type(self) -> BetType: ...

    @property
    def bet_cap(self) -> float: ...

    @property
    def start_date(self) -> datetime: ...

    @property
    def actions(self) -> ActionView: ...

    @property
    def currency_iso(self) -> str: ...


class Summary:
    @property
    def total_pot(self) -> float: ...

    @property
    def rake_pot(self) -> float: ...

    @property
    def main_pot(self) -> float: ...

    @property
    def side_pots(self) -> List[float]: ...
    
    @property
    def actions(self) -> ActionView: ...

    @property
    def winners(self) -> WinnerView: ...


class Street:
    @property
    def id(self) -> int: ...

    @property
    def cards(self) -> Cards: ...
    
    @property
    def actions(self) -> ActionView: ...


class Player:
    @property
    def name(self) -> str: ...

    @property
    def id(self) -> int: ...

    @property
    def seat(self) -> int: ...

    @property
    def chips(self) -> float: ...


class Winner:
    @property
    def amount(self) -> float: ...

    @property
    def player_id(self) -> int: ... # property to get player?

    @property
    def game_id(self) -> int: ...


class Cashout:
    @property
    def amount(self) -> float: ...

    @property
    def fee(self) -> float: ...


class Action:
    @property
    def type(self) -> ActionType: ...

    @property
    def player_id(self) -> int: ... # property to get player?
    
    @property
    def all_in(self) -> bool: ...
    
    @property
    def data(self) -> Union[
        # if self.type in [Bet, Call, Raise, Blind, Collect, UncalledBetReturned]
        float,
        # if self.type in [Fold, Muck, Show]
        Cards,
        # if self.type in [CashOut]
        Cashout,
        # if self.type in [Join]
        int,
        # if self.type in [Say]
        str
    ]: ...

    # if self.type in [Collect]
    @property
    def pot(self) -> Pot: ...
    
    # if self.type in [Blind]
    @property
    def blind(self) -> Blind: ...


class Card:
    @property
    def n(self) -> int: ...

    @property
    def suit(self) -> Suit: ...


class Suit:
    Spade: 'Suit' = ...
    Heart: 'Suit' = ...
    Club: 'Suit' = ...
    Diamond: 'Suit' = ...


class Pot:
    Main: 'Pot' = ...
    Side1: 'Pot' = ...
    Side2: 'Pot' = ...
    Side3: 'Pot' = ...
    

class Blind:
    Small: 'Blind' = ...
    Big: 'Blind' = ...
    BigSmall: 'Blind' = ...
    Dead: 'Blind' = ...
    Extra: 'Blind' = ...


class BetType:
    NoLimit: 'BetType' = ...
    Limit: 'BetType' = ...
    PotLimit: 'BetType' = ...


class ActionType:
    Bet: 'ActionType' = ...
    Call: 'ActionType' = ...
    Raise: 'ActionType' = ...

    Check: 'ActionType' = ...
    Fold: 'ActionType' = ...
    Muck: 'ActionType' = ...
    Show: 'ActionType' = ...
    Dealt: 'ActionType' = ...

    Blind: 'ActionType' = ...
    CashOut: 'ActionType' = ...
    CollectPot: 'ActionType' = ...
    UncalledBetReturned: 'ActionType' = ...

    Join: 'ActionType' = ...
    Leave: 'ActionType' = ...
    Sitout: 'ActionType' = ...
    Say: 'ActionType' = ...


class GameType:
    HoldEm: 'GameType' = ...
    Omaha: 'GameType' = ...
    OmahaHiLo: 'GameType' = ...


class PokerSite:
    PokerStars: 'PokerSite' = ...
    PokerStarsPluribus: 'PokerSite' = ...
    OnGame: 'PokerSite' = ...
    Absolute: 'PokerSite' = ...
    EverLeaf: 'PokerSite' = ...
    BetOnline: 'PokerSite' = ...
    FullTiltPoker: 'PokerSite' = ...
    PacificPoker: 'PokerSite' = ...
    PokerTracker: 'PokerSite' = ...
    PartyPoker: 'PokerSite' = ...
    GGPoker: 'PokerSite' = ...
    Winamax: 'PokerSite' = ...
    KingsClub: 'PokerSite' = ...
    Bovada: 'PokerSite' = ...
    Enet: 'PokerSite' = ...
    Cake: 'PokerSite' = ...
    Pkr: 'PokerSite' = ...
    Winning: 'PokerSite' = ...
