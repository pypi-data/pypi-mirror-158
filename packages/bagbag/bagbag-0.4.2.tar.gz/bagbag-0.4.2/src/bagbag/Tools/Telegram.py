from telethon.sync import TelegramClient
from telethon.sessions import StringSession
import telethon

class TelegramPeerResolved():
    def SetVar(self, Type, Name, Username, ID, AccessHash):
        self.Type = Type 
        self.Name = Name 
        self.Username = Username
        self.ID = ID
        self.AccessHash = AccessHash
    
    def History(self, limit:int, offset:int):
        pass

    def __repr__(self):
        return f"TelegramPeerResolved(Type:{self.Type} Name:{self.Name} Username:{self.Username} ID:{self.ID} AccessHash:{self.AccessHash})"

    def __str__(self):
        return f"TelegramPeerResolved(Type:{self.Type} Name:{self.Name} Username:{self.Username} ID:{self.ID} AccessHash:{self.AccessHash})"

# It's a wrapper for the `telethon` library that allows you to use it in a more Pythonic way
class Telegram():
    def __init__(self, appid:str, apphash:str, sessionString:str=None):
        """
        __init__(self, appid:str, apphash:str, sessionString:str=None):
        
        :param appid: Your app's API ID
        :type appid: str
        :param apphash: This is a hash that is generated by Telegram when you register your app
        :type apphash: str
        :param sessionString: This is the session string that you get from the Telegram API
        :type sessionString: str
        """
        self.client = TelegramClient(StringSession(sessionString), appid, apphash)
        self.client.start()

    def SessionString(self):
        """
        It takes the session object from the client object and saves it to a string
        :return: The session string is being returned.
        """
        return self.client.session.save()
    
    def ResolvePeerByUsername(self, username:str) -> TelegramPeerResolved:
        """
        It resolves a username to a TelegramPeerResolved object.
        
        :param username: The username of the peer you want to resolve
        :type username: str
        :return: A TelegramPeerResolved object.
        """
        tpr = TelegramPeerResolved()

        obj = self.client.get_entity(username)
        if type(obj) == telethon.tl.types.Channel:
            tpr.Type = "channel"
            tpr.Name = obj.title
        elif type(obj) == telethon.tl.types.User:
            tpr.Type = "user"
            tpr.Name = " ".join(filter([obj.first_name, obj.last_name], lambda x: x != None))
        
        tpr.AccessHash = obj.access_hash
        tpr.Username = username 
        tpr.ID = obj.id

        return tpr

if __name__ == "__main__":
    api_id = 987654321
    api_hash = '123456'
    sessionString = "session"

    tg = Telegram(api_id, api_hash, sessionString)
    peer = tg.ResolvePeerByUsername("username")
    print(peer)
  